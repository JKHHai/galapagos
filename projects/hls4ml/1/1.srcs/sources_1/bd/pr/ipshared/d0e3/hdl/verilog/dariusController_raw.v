// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dariusController_raw,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1450,HLS_SYN_LUT=1683,HLS_VERSION=2018_2}" *)

module dariusController_raw (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TDEST,
        stream_in_TLAST,
        stream_in_TKEEP,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TDEST,
        stream_out_TLAST,
        stream_out_TKEEP,
        axis_cmd_mm2s_V_data_V_TDATA,
        axis_cmd_mm2s_V_data_V_TVALID,
        axis_cmd_mm2s_V_data_V_TREADY,
        axis_cmd_s2mm_V_data_V_TDATA,
        axis_cmd_s2mm_V_data_V_TVALID,
        axis_cmd_s2mm_V_data_V_TREADY,
        axis_mm2s_TDATA,
        axis_mm2s_TVALID,
        axis_mm2s_TREADY,
        axis_mm2s_TLAST,
        axis_s2mm_TDATA,
        axis_s2mm_TVALID,
        axis_s2mm_TREADY,
        axis_s2mm_TLAST,
        m_axi_darius_driver_AWVALID,
        m_axi_darius_driver_AWREADY,
        m_axi_darius_driver_AWADDR,
        m_axi_darius_driver_AWID,
        m_axi_darius_driver_AWLEN,
        m_axi_darius_driver_AWSIZE,
        m_axi_darius_driver_AWBURST,
        m_axi_darius_driver_AWLOCK,
        m_axi_darius_driver_AWCACHE,
        m_axi_darius_driver_AWPROT,
        m_axi_darius_driver_AWQOS,
        m_axi_darius_driver_AWREGION,
        m_axi_darius_driver_AWUSER,
        m_axi_darius_driver_WVALID,
        m_axi_darius_driver_WREADY,
        m_axi_darius_driver_WDATA,
        m_axi_darius_driver_WSTRB,
        m_axi_darius_driver_WLAST,
        m_axi_darius_driver_WID,
        m_axi_darius_driver_WUSER,
        m_axi_darius_driver_ARVALID,
        m_axi_darius_driver_ARREADY,
        m_axi_darius_driver_ARADDR,
        m_axi_darius_driver_ARID,
        m_axi_darius_driver_ARLEN,
        m_axi_darius_driver_ARSIZE,
        m_axi_darius_driver_ARBURST,
        m_axi_darius_driver_ARLOCK,
        m_axi_darius_driver_ARCACHE,
        m_axi_darius_driver_ARPROT,
        m_axi_darius_driver_ARQOS,
        m_axi_darius_driver_ARREGION,
        m_axi_darius_driver_ARUSER,
        m_axi_darius_driver_RVALID,
        m_axi_darius_driver_RREADY,
        m_axi_darius_driver_RDATA,
        m_axi_darius_driver_RLAST,
        m_axi_darius_driver_RID,
        m_axi_darius_driver_RUSER,
        m_axi_darius_driver_RRESP,
        m_axi_darius_driver_BVALID,
        m_axi_darius_driver_BREADY,
        m_axi_darius_driver_BRESP,
        m_axi_darius_driver_BID,
        m_axi_darius_driver_BUSER,
        rank
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;
parameter    C_M_AXI_DARIUS_DRIVER_ID_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH = 32;
parameter    C_M_AXI_DARIUS_DRIVER_DATA_WIDTH = 32;
parameter    C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH = 1;
parameter    C_M_AXI_DARIUS_DRIVER_TARGET_ADDR = 0;
parameter    C_M_AXI_DARIUS_DRIVER_USER_VALUE = 0;
parameter    C_M_AXI_DARIUS_DRIVER_PROT_VALUE = 0;
parameter    C_M_AXI_DARIUS_DRIVER_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_DARIUS_DRIVER_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [7:0] stream_in_TDEST;
input  [0:0] stream_in_TLAST;
input  [7:0] stream_in_TKEEP;
output  [63:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [7:0] stream_out_TDEST;
output  [0:0] stream_out_TLAST;
output  [7:0] stream_out_TKEEP;
output  [71:0] axis_cmd_mm2s_V_data_V_TDATA;
output   axis_cmd_mm2s_V_data_V_TVALID;
input   axis_cmd_mm2s_V_data_V_TREADY;
output  [71:0] axis_cmd_s2mm_V_data_V_TDATA;
output   axis_cmd_s2mm_V_data_V_TVALID;
input   axis_cmd_s2mm_V_data_V_TREADY;
input  [63:0] axis_mm2s_TDATA;
input   axis_mm2s_TVALID;
output   axis_mm2s_TREADY;
input  [0:0] axis_mm2s_TLAST;
output  [63:0] axis_s2mm_TDATA;
output   axis_s2mm_TVALID;
input   axis_s2mm_TREADY;
output  [0:0] axis_s2mm_TLAST;
output   m_axi_darius_driver_AWVALID;
input   m_axi_darius_driver_AWREADY;
output  [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_AWADDR;
output  [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_AWID;
output  [7:0] m_axi_darius_driver_AWLEN;
output  [2:0] m_axi_darius_driver_AWSIZE;
output  [1:0] m_axi_darius_driver_AWBURST;
output  [1:0] m_axi_darius_driver_AWLOCK;
output  [3:0] m_axi_darius_driver_AWCACHE;
output  [2:0] m_axi_darius_driver_AWPROT;
output  [3:0] m_axi_darius_driver_AWQOS;
output  [3:0] m_axi_darius_driver_AWREGION;
output  [C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH - 1:0] m_axi_darius_driver_AWUSER;
output   m_axi_darius_driver_WVALID;
input   m_axi_darius_driver_WREADY;
output  [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_WDATA;
output  [C_M_AXI_DARIUS_DRIVER_WSTRB_WIDTH - 1:0] m_axi_darius_driver_WSTRB;
output   m_axi_darius_driver_WLAST;
output  [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_WID;
output  [C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH - 1:0] m_axi_darius_driver_WUSER;
output   m_axi_darius_driver_ARVALID;
input   m_axi_darius_driver_ARREADY;
output  [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_ARADDR;
output  [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_ARID;
output  [7:0] m_axi_darius_driver_ARLEN;
output  [2:0] m_axi_darius_driver_ARSIZE;
output  [1:0] m_axi_darius_driver_ARBURST;
output  [1:0] m_axi_darius_driver_ARLOCK;
output  [3:0] m_axi_darius_driver_ARCACHE;
output  [2:0] m_axi_darius_driver_ARPROT;
output  [3:0] m_axi_darius_driver_ARQOS;
output  [3:0] m_axi_darius_driver_ARREGION;
output  [C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH - 1:0] m_axi_darius_driver_ARUSER;
input   m_axi_darius_driver_RVALID;
output   m_axi_darius_driver_RREADY;
input  [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_RDATA;
input   m_axi_darius_driver_RLAST;
input  [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_RID;
input  [C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH - 1:0] m_axi_darius_driver_RUSER;
input  [1:0] m_axi_darius_driver_RRESP;
input   m_axi_darius_driver_BVALID;
output   m_axi_darius_driver_BREADY;
input  [1:0] m_axi_darius_driver_BRESP;
input  [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_BID;
input  [C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH - 1:0] m_axi_darius_driver_BUSER;
input  [31:0] rank;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [63:0] stream_in_V_data_V_0_payload_A;
reg   [63:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
wire    stream_in_V_keep_V_0_vld_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [1:0] stream_in_V_keep_V_0_state;
reg   [63:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [63:0] stream_out_V_data_V_1_payload_A;
reg   [63:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
wire   [7:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg    stream_out_V_dest_V_1_sel_rd;
wire    stream_out_V_dest_V_1_sel;
reg   [1:0] stream_out_V_dest_V_1_state;
wire   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg    stream_out_V_last_V_1_sel_rd;
wire    stream_out_V_last_V_1_sel;
reg   [1:0] stream_out_V_last_V_1_state;
wire   [7:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg    stream_out_V_keep_V_1_sel_rd;
wire    stream_out_V_keep_V_1_sel;
reg   [1:0] stream_out_V_keep_V_1_state;
wire   [71:0] axis_cmd_mm2s_V_data_V_1_data_out;
reg    axis_cmd_mm2s_V_data_V_1_vld_in;
wire    axis_cmd_mm2s_V_data_V_1_vld_out;
wire    axis_cmd_mm2s_V_data_V_1_ack_in;
wire    axis_cmd_mm2s_V_data_V_1_ack_out;
reg    axis_cmd_mm2s_V_data_V_1_sel_rd;
wire    axis_cmd_mm2s_V_data_V_1_sel;
reg   [1:0] axis_cmd_mm2s_V_data_V_1_state;
reg   [71:0] axis_cmd_s2mm_V_data_V_1_data_in;
reg   [71:0] axis_cmd_s2mm_V_data_V_1_data_out;
reg    axis_cmd_s2mm_V_data_V_1_vld_in;
wire    axis_cmd_s2mm_V_data_V_1_vld_out;
wire    axis_cmd_s2mm_V_data_V_1_ack_in;
wire    axis_cmd_s2mm_V_data_V_1_ack_out;
reg   [71:0] axis_cmd_s2mm_V_data_V_1_payload_A;
reg   [71:0] axis_cmd_s2mm_V_data_V_1_payload_B;
reg    axis_cmd_s2mm_V_data_V_1_sel_rd;
reg    axis_cmd_s2mm_V_data_V_1_sel_wr;
wire    axis_cmd_s2mm_V_data_V_1_sel;
wire    axis_cmd_s2mm_V_data_V_1_load_A;
wire    axis_cmd_s2mm_V_data_V_1_load_B;
reg   [1:0] axis_cmd_s2mm_V_data_V_1_state;
wire    axis_cmd_s2mm_V_data_V_1_state_cmp_full;
wire    axis_mm2s_V_last_V_0_vld_in;
wire    axis_mm2s_V_last_V_0_ack_out;
reg   [1:0] axis_mm2s_V_last_V_0_state;
reg   [63:0] axis_s2mm_V_data_V_1_data_out;
reg    axis_s2mm_V_data_V_1_vld_in;
wire    axis_s2mm_V_data_V_1_vld_out;
wire    axis_s2mm_V_data_V_1_ack_in;
wire    axis_s2mm_V_data_V_1_ack_out;
reg   [63:0] axis_s2mm_V_data_V_1_payload_A;
reg   [63:0] axis_s2mm_V_data_V_1_payload_B;
reg    axis_s2mm_V_data_V_1_sel_rd;
reg    axis_s2mm_V_data_V_1_sel_wr;
wire    axis_s2mm_V_data_V_1_sel;
wire    axis_s2mm_V_data_V_1_load_A;
wire    axis_s2mm_V_data_V_1_load_B;
reg   [1:0] axis_s2mm_V_data_V_1_state;
wire    axis_s2mm_V_data_V_1_state_cmp_full;
wire   [0:0] axis_s2mm_V_last_V_1_data_out;
reg    axis_s2mm_V_last_V_1_vld_in;
wire    axis_s2mm_V_last_V_1_vld_out;
wire    axis_s2mm_V_last_V_1_ack_in;
wire    axis_s2mm_V_last_V_1_ack_out;
reg    axis_s2mm_V_last_V_1_sel_rd;
wire    axis_s2mm_V_last_V_1_sel;
reg   [1:0] axis_s2mm_V_last_V_1_state;
reg   [2:0] state_V;
reg   [31:0] parameter_mem_info_0;
reg   [31:0] parameter_mem_info_1;
reg   [5:0] darius_info_address0;
reg    darius_info_ce0;
reg    darius_info_we0;
wire   [31:0] darius_info_d0;
wire   [31:0] darius_info_q0;
reg   [31:0] cumulative_cycle_cou;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state35;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    axis_cmd_mm2s_V_data_V_TDATA_blk_n;
reg    axis_cmd_s2mm_V_data_V_TDATA_blk_n;
wire    ap_CS_fsm_state36;
wire   [0:0] exitcond1_fu_502_p2;
wire    ap_CS_fsm_state38;
wire   [2:0] state_V_load_load_fu_399_p1;
reg    axis_s2mm_TDATA_blk_n;
wire    ap_CS_fsm_state41;
reg    darius_driver_blk_n_AW;
wire    ap_CS_fsm_state39;
wire   [0:0] tmp_s_fu_633_p2;
reg    darius_driver_blk_n_W;
wire    ap_CS_fsm_state42;
reg    darius_driver_blk_n_B;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state26;
wire   [0:0] exitcond_fu_469_p2;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
reg   [2:0] state_V_load_reg_678;
reg    darius_driver_blk_n_AR;
reg    darius_driver_blk_n_R;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state8;
reg    darius_driver_AWVALID;
wire    darius_driver_AWREADY;
reg   [31:0] darius_driver_AWADDR;
reg   [31:0] darius_driver_AWLEN;
reg    darius_driver_WVALID;
wire    darius_driver_WREADY;
reg   [31:0] darius_driver_WDATA;
reg    darius_driver_ARVALID;
wire    darius_driver_ARREADY;
reg   [31:0] darius_driver_ARADDR;
wire    darius_driver_RVALID;
reg    darius_driver_RREADY;
wire   [31:0] darius_driver_RDATA;
wire    darius_driver_RLAST;
wire   [0:0] darius_driver_RID;
wire   [0:0] darius_driver_RUSER;
wire   [1:0] darius_driver_RRESP;
wire    darius_driver_BVALID;
reg    darius_driver_BREADY;
wire   [1:0] darius_driver_BRESP;
wire   [0:0] darius_driver_BID;
wire   [0:0] darius_driver_BUSER;
reg   [31:0] reg_393;
reg    ap_sig_ioackin_darius_driver_AWREADY;
wire    ap_CS_fsm_state27;
reg    ap_sig_ioackin_darius_driver_ARREADY;
reg    ap_block_state1_io;
reg   [31:0] darius_driver_addr_2_1_reg_688;
wire  signed [63:0] gp_data_V_fu_431_p1;
reg    ap_block_state9_io;
reg   [31:0] darius_driver_read_reg_698;
wire   [5:0] i_2_fu_475_p2;
reg   [5:0] i_2_reg_718;
reg    ap_block_state26_io;
wire   [1:0] i_1_fu_508_p2;
reg   [1:0] i_1_reg_731;
reg    ap_block_state36_io;
wire   [0:0] tmp_11_fu_514_p1;
reg   [0:0] tmp_11_reg_736;
wire   [71:0] p_Result_s_fu_544_p5;
wire   [29:0] tmp_1_fu_605_p3;
reg   [29:0] tmp_1_reg_745;
wire   [28:0] i_3_fu_638_p2;
reg   [28:0] i_3_reg_753;
reg    ap_block_state39_io;
wire   [2:0] i_4_fu_650_p2;
reg   [2:0] i_4_reg_766;
wire    ap_CS_fsm_state48;
wire   [5:0] i_5_fu_662_p2;
reg   [5:0] i_5_reg_774;
wire    ap_CS_fsm_state50;
reg   [5:0] i2_reg_326;
reg    ap_sig_ioackin_darius_driver_WREADY;
reg   [1:0] i_reg_337;
reg   [28:0] i1_reg_348;
reg   [2:0] i3_reg_359;
reg   [5:0] i5_reg_370;
wire   [0:0] exitcond2_fu_644_p2;
wire   [63:0] tmp_6_fu_481_p1;
wire   [63:0] tmp_9_fu_673_p1;
reg    ap_reg_ioackin_darius_driver_ARREADY;
reg    ap_reg_ioackin_darius_driver_AWREADY;
reg    ap_block_state34;
reg    ap_reg_ioackin_darius_driver_WREADY;
wire   [2:0] storemerge_fu_441_p3;
wire    ap_CS_fsm_state18;
wire   [0:0] exitcond3_fu_656_p2;
wire   [31:0] tmp_10_fu_613_p1;
wire  signed [31:0] val_assign_fu_420_p2;
wire   [31:0] tmp_2_fu_492_p1;
reg    ap_block_state10_io;
wire   [0:0] tmp_4_fu_436_p2;
wire   [29:0] tmp_5_fu_526_p4;
wire  signed [31:0] loc_V_trunc_fu_536_p1;
wire   [22:0] tmp_3_fu_540_p1;
wire   [31:0] p_neg_fu_565_p2;
wire   [28:0] tmp_fu_571_p4;
wire   [29:0] p_lshr_cast_fu_581_p1;
wire   [28:0] tmp_7_fu_591_p4;
wire   [0:0] tmp_8_fu_557_p3;
wire   [29:0] p_neg_t_fu_585_p2;
wire   [29:0] p_lshr_f_cast_fu_601_p1;
wire   [29:0] i1_cast_fu_629_p1;
reg   [50:0] ap_NS_fsm;
reg    ap_condition_1847;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 axis_cmd_mm2s_V_data_V_1_sel_rd = 1'b0;
#0 axis_cmd_mm2s_V_data_V_1_state = 2'd0;
#0 axis_cmd_s2mm_V_data_V_1_sel_rd = 1'b0;
#0 axis_cmd_s2mm_V_data_V_1_sel_wr = 1'b0;
#0 axis_cmd_s2mm_V_data_V_1_state = 2'd0;
#0 axis_mm2s_V_last_V_0_state = 2'd0;
#0 axis_s2mm_V_data_V_1_sel_rd = 1'b0;
#0 axis_s2mm_V_data_V_1_sel_wr = 1'b0;
#0 axis_s2mm_V_data_V_1_state = 2'd0;
#0 axis_s2mm_V_last_V_1_sel_rd = 1'b0;
#0 axis_s2mm_V_last_V_1_state = 2'd0;
#0 state_V = 3'd0;
#0 parameter_mem_info_0 = 32'd0;
#0 parameter_mem_info_1 = 32'd0;
#0 cumulative_cycle_cou = 32'd0;
#0 ap_reg_ioackin_darius_driver_ARREADY = 1'b0;
#0 ap_reg_ioackin_darius_driver_AWREADY = 1'b0;
#0 ap_reg_ioackin_darius_driver_WREADY = 1'b0;
end

dariusController_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 35 ),
    .AddressWidth( 6 ))
darius_info_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(darius_info_address0),
    .ce0(darius_info_ce0),
    .we0(darius_info_we0),
    .d0(darius_info_d0),
    .q0(darius_info_q0)
);

dariusController_raw_darius_driver_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DARIUS_DRIVER_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DARIUS_DRIVER_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DARIUS_DRIVER_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DARIUS_DRIVER_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DARIUS_DRIVER_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DARIUS_DRIVER_CACHE_VALUE ))
dariusController_raw_darius_driver_m_axi_U(
    .AWVALID(m_axi_darius_driver_AWVALID),
    .AWREADY(m_axi_darius_driver_AWREADY),
    .AWADDR(m_axi_darius_driver_AWADDR),
    .AWID(m_axi_darius_driver_AWID),
    .AWLEN(m_axi_darius_driver_AWLEN),
    .AWSIZE(m_axi_darius_driver_AWSIZE),
    .AWBURST(m_axi_darius_driver_AWBURST),
    .AWLOCK(m_axi_darius_driver_AWLOCK),
    .AWCACHE(m_axi_darius_driver_AWCACHE),
    .AWPROT(m_axi_darius_driver_AWPROT),
    .AWQOS(m_axi_darius_driver_AWQOS),
    .AWREGION(m_axi_darius_driver_AWREGION),
    .AWUSER(m_axi_darius_driver_AWUSER),
    .WVALID(m_axi_darius_driver_WVALID),
    .WREADY(m_axi_darius_driver_WREADY),
    .WDATA(m_axi_darius_driver_WDATA),
    .WSTRB(m_axi_darius_driver_WSTRB),
    .WLAST(m_axi_darius_driver_WLAST),
    .WID(m_axi_darius_driver_WID),
    .WUSER(m_axi_darius_driver_WUSER),
    .ARVALID(m_axi_darius_driver_ARVALID),
    .ARREADY(m_axi_darius_driver_ARREADY),
    .ARADDR(m_axi_darius_driver_ARADDR),
    .ARID(m_axi_darius_driver_ARID),
    .ARLEN(m_axi_darius_driver_ARLEN),
    .ARSIZE(m_axi_darius_driver_ARSIZE),
    .ARBURST(m_axi_darius_driver_ARBURST),
    .ARLOCK(m_axi_darius_driver_ARLOCK),
    .ARCACHE(m_axi_darius_driver_ARCACHE),
    .ARPROT(m_axi_darius_driver_ARPROT),
    .ARQOS(m_axi_darius_driver_ARQOS),
    .ARREGION(m_axi_darius_driver_ARREGION),
    .ARUSER(m_axi_darius_driver_ARUSER),
    .RVALID(m_axi_darius_driver_RVALID),
    .RREADY(m_axi_darius_driver_RREADY),
    .RDATA(m_axi_darius_driver_RDATA),
    .RLAST(m_axi_darius_driver_RLAST),
    .RID(m_axi_darius_driver_RID),
    .RUSER(m_axi_darius_driver_RUSER),
    .RRESP(m_axi_darius_driver_RRESP),
    .BVALID(m_axi_darius_driver_BVALID),
    .BREADY(m_axi_darius_driver_BREADY),
    .BRESP(m_axi_darius_driver_BRESP),
    .BID(m_axi_darius_driver_BID),
    .BUSER(m_axi_darius_driver_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(darius_driver_ARVALID),
    .I_ARREADY(darius_driver_ARREADY),
    .I_ARADDR(darius_driver_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(darius_driver_RVALID),
    .I_RREADY(darius_driver_RREADY),
    .I_RDATA(darius_driver_RDATA),
    .I_RID(darius_driver_RID),
    .I_RUSER(darius_driver_RUSER),
    .I_RRESP(darius_driver_RRESP),
    .I_RLAST(darius_driver_RLAST),
    .I_AWVALID(darius_driver_AWVALID),
    .I_AWREADY(darius_driver_AWREADY),
    .I_AWADDR(darius_driver_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(darius_driver_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(darius_driver_WVALID),
    .I_WREADY(darius_driver_WREADY),
    .I_WDATA(darius_driver_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(darius_driver_BVALID),
    .I_BREADY(darius_driver_BREADY),
    .I_BRESP(darius_driver_BRESP),
    .I_BID(darius_driver_BID),
    .I_BUSER(darius_driver_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_darius_driver_ARREADY <= 1'b0;
    end else begin
        if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd4)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd3)))) begin
            ap_reg_ioackin_darius_driver_ARREADY <= 1'b0;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (darius_driver_ARREADY == 1'b1) & (state_V == 3'd4)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (darius_driver_ARREADY == 1'b1) & (state_V == 3'd3)))) begin
            ap_reg_ioackin_darius_driver_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_darius_driver_AWREADY <= 1'b0;
    end else begin
        if ((((exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io)) | (~((ap_sig_ioackin_darius_driver_AWREADY == 1'b0) | (darius_driver_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_darius_driver_AWREADY == 1'b1)) | ((tmp_s_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_block_state39_io)))) begin
            ap_reg_ioackin_darius_driver_AWREADY <= 1'b0;
        end else if ((((exitcond_fu_469_p2 == 1'd1) & (darius_driver_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((darius_driver_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (darius_driver_BVALID == 1'b1)) | ((darius_driver_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_s_fu_633_p2 == 1'd0) & (darius_driver_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
            ap_reg_ioackin_darius_driver_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_darius_driver_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1)))) begin
            ap_reg_ioackin_darius_driver_WREADY <= 1'b0;
        end else if ((((darius_driver_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((darius_driver_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((darius_driver_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((darius_driver_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
            ap_reg_ioackin_darius_driver_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_cmd_mm2s_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_cmd_mm2s_V_data_V_1_ack_out == 1'b1) & (axis_cmd_mm2s_V_data_V_1_vld_out == 1'b1))) begin
            axis_cmd_mm2s_V_data_V_1_sel_rd <= ~axis_cmd_mm2s_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_cmd_mm2s_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_cmd_mm2s_V_data_V_1_state == 2'd2) & (axis_cmd_mm2s_V_data_V_1_vld_in == 1'b0)) | ((axis_cmd_mm2s_V_data_V_1_state == 2'd3) & (axis_cmd_mm2s_V_data_V_1_vld_in == 1'b0) & (axis_cmd_mm2s_V_data_V_1_ack_out == 1'b1)))) begin
            axis_cmd_mm2s_V_data_V_1_state <= 2'd2;
        end else if ((((axis_cmd_mm2s_V_data_V_1_ack_out == 1'b0) & (axis_cmd_mm2s_V_data_V_1_state == 2'd1)) | ((axis_cmd_mm2s_V_data_V_1_state == 2'd3) & (axis_cmd_mm2s_V_data_V_1_ack_out == 1'b0) & (axis_cmd_mm2s_V_data_V_1_vld_in == 1'b1)))) begin
            axis_cmd_mm2s_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_cmd_mm2s_V_data_V_1_vld_in == 1'b0) & (axis_cmd_mm2s_V_data_V_1_ack_out == 1'b1)) & ~((axis_cmd_mm2s_V_data_V_1_ack_out == 1'b0) & (axis_cmd_mm2s_V_data_V_1_vld_in == 1'b1)) & (axis_cmd_mm2s_V_data_V_1_state == 2'd3)) | ((axis_cmd_mm2s_V_data_V_1_ack_out == 1'b1) & (axis_cmd_mm2s_V_data_V_1_state == 2'd1)) | ((axis_cmd_mm2s_V_data_V_1_state == 2'd2) & (axis_cmd_mm2s_V_data_V_1_vld_in == 1'b1)))) begin
            axis_cmd_mm2s_V_data_V_1_state <= 2'd3;
        end else begin
            axis_cmd_mm2s_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_cmd_s2mm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_cmd_s2mm_V_data_V_1_ack_out == 1'b1) & (axis_cmd_s2mm_V_data_V_1_vld_out == 1'b1))) begin
            axis_cmd_s2mm_V_data_V_1_sel_rd <= ~axis_cmd_s2mm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_cmd_s2mm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_cmd_s2mm_V_data_V_1_ack_in == 1'b1) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b1))) begin
            axis_cmd_s2mm_V_data_V_1_sel_wr <= ~axis_cmd_s2mm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_cmd_s2mm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_cmd_s2mm_V_data_V_1_state == 2'd2) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b0)) | ((axis_cmd_s2mm_V_data_V_1_state == 2'd3) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b0) & (axis_cmd_s2mm_V_data_V_1_ack_out == 1'b1)))) begin
            axis_cmd_s2mm_V_data_V_1_state <= 2'd2;
        end else if ((((axis_cmd_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_cmd_s2mm_V_data_V_1_state == 2'd1)) | ((axis_cmd_s2mm_V_data_V_1_state == 2'd3) & (axis_cmd_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b1)))) begin
            axis_cmd_s2mm_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_cmd_s2mm_V_data_V_1_vld_in == 1'b0) & (axis_cmd_s2mm_V_data_V_1_ack_out == 1'b1)) & ~((axis_cmd_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b1)) & (axis_cmd_s2mm_V_data_V_1_state == 2'd3)) | ((axis_cmd_s2mm_V_data_V_1_ack_out == 1'b1) & (axis_cmd_s2mm_V_data_V_1_state == 2'd1)) | ((axis_cmd_s2mm_V_data_V_1_state == 2'd2) & (axis_cmd_s2mm_V_data_V_1_vld_in == 1'b1)))) begin
            axis_cmd_s2mm_V_data_V_1_state <= 2'd3;
        end else begin
            axis_cmd_s2mm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_mm2s_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_mm2s_V_last_V_0_state == 2'd2) & (axis_mm2s_V_last_V_0_vld_in == 1'b0)) | ((axis_mm2s_V_last_V_0_state == 2'd3) & (axis_mm2s_V_last_V_0_vld_in == 1'b0) & (axis_mm2s_V_last_V_0_ack_out == 1'b1)))) begin
            axis_mm2s_V_last_V_0_state <= 2'd2;
        end else if ((((axis_mm2s_V_last_V_0_ack_out == 1'b0) & (axis_mm2s_V_last_V_0_state == 2'd1)) | ((axis_mm2s_V_last_V_0_state == 2'd3) & (axis_mm2s_V_last_V_0_ack_out == 1'b0) & (axis_mm2s_V_last_V_0_vld_in == 1'b1)))) begin
            axis_mm2s_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_mm2s_V_last_V_0_vld_in == 1'b0) & (axis_mm2s_V_last_V_0_ack_out == 1'b1)) & ~((axis_mm2s_V_last_V_0_ack_out == 1'b0) & (axis_mm2s_V_last_V_0_vld_in == 1'b1)) & (axis_mm2s_V_last_V_0_state == 2'd3)) | ((axis_mm2s_V_last_V_0_ack_out == 1'b1) & (axis_mm2s_V_last_V_0_state == 2'd1)) | ((axis_mm2s_V_last_V_0_state == 2'd2) & (axis_mm2s_V_last_V_0_vld_in == 1'b1)))) begin
            axis_mm2s_V_last_V_0_state <= 2'd3;
        end else begin
            axis_mm2s_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_s2mm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_s2mm_V_data_V_1_ack_out == 1'b1) & (axis_s2mm_V_data_V_1_vld_out == 1'b1))) begin
            axis_s2mm_V_data_V_1_sel_rd <= ~axis_s2mm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_s2mm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_s2mm_V_data_V_1_ack_in == 1'b1) & (axis_s2mm_V_data_V_1_vld_in == 1'b1))) begin
            axis_s2mm_V_data_V_1_sel_wr <= ~axis_s2mm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_s2mm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_s2mm_V_data_V_1_state == 2'd2) & (axis_s2mm_V_data_V_1_vld_in == 1'b0)) | ((axis_s2mm_V_data_V_1_state == 2'd3) & (axis_s2mm_V_data_V_1_vld_in == 1'b0) & (axis_s2mm_V_data_V_1_ack_out == 1'b1)))) begin
            axis_s2mm_V_data_V_1_state <= 2'd2;
        end else if ((((axis_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_s2mm_V_data_V_1_state == 2'd1)) | ((axis_s2mm_V_data_V_1_state == 2'd3) & (axis_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_s2mm_V_data_V_1_vld_in == 1'b1)))) begin
            axis_s2mm_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_s2mm_V_data_V_1_vld_in == 1'b0) & (axis_s2mm_V_data_V_1_ack_out == 1'b1)) & ~((axis_s2mm_V_data_V_1_ack_out == 1'b0) & (axis_s2mm_V_data_V_1_vld_in == 1'b1)) & (axis_s2mm_V_data_V_1_state == 2'd3)) | ((axis_s2mm_V_data_V_1_ack_out == 1'b1) & (axis_s2mm_V_data_V_1_state == 2'd1)) | ((axis_s2mm_V_data_V_1_state == 2'd2) & (axis_s2mm_V_data_V_1_vld_in == 1'b1)))) begin
            axis_s2mm_V_data_V_1_state <= 2'd3;
        end else begin
            axis_s2mm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_s2mm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_s2mm_V_last_V_1_ack_out == 1'b1) & (axis_s2mm_V_last_V_1_vld_out == 1'b1))) begin
            axis_s2mm_V_last_V_1_sel_rd <= ~axis_s2mm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_s2mm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((axis_s2mm_V_last_V_1_state == 2'd2) & (axis_s2mm_V_last_V_1_vld_in == 1'b0)) | ((axis_s2mm_V_last_V_1_state == 2'd3) & (axis_s2mm_V_last_V_1_vld_in == 1'b0) & (axis_s2mm_V_last_V_1_ack_out == 1'b1)))) begin
            axis_s2mm_V_last_V_1_state <= 2'd2;
        end else if ((((axis_s2mm_V_last_V_1_ack_out == 1'b0) & (axis_s2mm_V_last_V_1_state == 2'd1)) | ((axis_s2mm_V_last_V_1_state == 2'd3) & (axis_s2mm_V_last_V_1_ack_out == 1'b0) & (axis_s2mm_V_last_V_1_vld_in == 1'b1)))) begin
            axis_s2mm_V_last_V_1_state <= 2'd1;
        end else if (((~((axis_s2mm_V_last_V_1_vld_in == 1'b0) & (axis_s2mm_V_last_V_1_ack_out == 1'b1)) & ~((axis_s2mm_V_last_V_1_ack_out == 1'b0) & (axis_s2mm_V_last_V_1_vld_in == 1'b1)) & (axis_s2mm_V_last_V_1_state == 2'd3)) | ((axis_s2mm_V_last_V_1_ack_out == 1'b1) & (axis_s2mm_V_last_V_1_state == 2'd1)) | ((axis_s2mm_V_last_V_1_state == 2'd2) & (axis_s2mm_V_last_V_1_vld_in == 1'b1)))) begin
            axis_s2mm_V_last_V_1_state <= 2'd3;
        end else begin
            axis_s2mm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b1)) | ((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_state == 2'd1)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_state == 2'd1)) | ((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_state == 2'd1)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_state == 2'd1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_state == 2'd1)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_state == 2'd1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_state == 2'd1)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_state == 2'd1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state35))) begin
        cumulative_cycle_cou <= tmp_2_fu_492_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        cumulative_cycle_cou <= val_assign_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_s2mm_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        i1_reg_348 <= i_3_reg_753;
    end else if (((axis_cmd_s2mm_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        i1_reg_348 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1))) begin
        i2_reg_326 <= i_2_reg_718;
    end else if ((~((ap_sig_ioackin_darius_driver_AWREADY == 1'b0) | (darius_driver_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
        i2_reg_326 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        i3_reg_359 <= i_4_reg_766;
    end else if (((1'b1 == ap_CS_fsm_state47) & (darius_driver_BVALID == 1'b1))) begin
        i3_reg_359 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        i5_reg_370 <= 6'd0;
    end else if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        i5_reg_370 <= i_5_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_reg_337 <= i_1_reg_731;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (state_V_load_load_fu_399_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_337 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io))) begin
        state_V <= 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_V <= storemerge_fu_441_p3;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd1))) begin
        state_V <= 3'd2;
    end else if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd4)) | ((exitcond3_fu_656_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)))) begin
        state_V <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_cmd_s2mm_V_data_V_1_load_A == 1'b1)) begin
        axis_cmd_s2mm_V_data_V_1_payload_A <= axis_cmd_s2mm_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_cmd_s2mm_V_data_V_1_load_B == 1'b1)) begin
        axis_cmd_s2mm_V_data_V_1_payload_B <= axis_cmd_s2mm_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_s2mm_V_data_V_1_load_A == 1'b1)) begin
        axis_s2mm_V_data_V_1_payload_A <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_s2mm_V_data_V_1_load_B == 1'b1)) begin
        axis_s2mm_V_data_V_1_payload_B <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (darius_driver_RVALID == 1'b1))) begin
        darius_driver_addr_2_1_reg_688 <= darius_driver_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (darius_driver_RVALID == 1'b1))) begin
        darius_driver_read_reg_698 <= darius_driver_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io))) begin
        i_1_reg_731 <= i_1_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io))) begin
        i_2_reg_718 <= i_2_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_block_state39_io))) begin
        i_3_reg_753 <= i_3_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_4_reg_766 <= i_4_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        i_5_reg_774 <= i_5_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_reg_736 == 1'd0) & (stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        parameter_mem_info_0 <= tmp_10_fu_613_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_reg_736 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        parameter_mem_info_1 <= tmp_10_fu_613_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_darius_driver_AWREADY == 1'b1)))) begin
        reg_393 <= darius_info_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_V_load_reg_678 <= state_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= gp_data_V_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= gp_data_V_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io))) begin
        tmp_11_reg_736 <= tmp_11_fu_514_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_502_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io))) begin
        tmp_1_reg_745 <= tmp_1_fu_605_p3;
    end
end

always @ (*) begin
    if ((~((axis_s2mm_V_last_V_1_ack_in == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | ((darius_driver_BVALID == 1'b0) & (state_V_load_reg_678 == 3'd2))) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((axis_s2mm_V_last_V_1_ack_in == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | ((darius_driver_BVALID == 1'b0) & (state_V_load_reg_678 == 3'd2))) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_darius_driver_ARREADY == 1'b0)) begin
        ap_sig_ioackin_darius_driver_ARREADY = darius_driver_ARREADY;
    end else begin
        ap_sig_ioackin_darius_driver_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_darius_driver_AWREADY == 1'b0)) begin
        ap_sig_ioackin_darius_driver_AWREADY = darius_driver_AWREADY;
    end else begin
        ap_sig_ioackin_darius_driver_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_darius_driver_WREADY == 1'b0)) begin
        ap_sig_ioackin_darius_driver_WREADY = darius_driver_WREADY;
    end else begin
        ap_sig_ioackin_darius_driver_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        axis_cmd_mm2s_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_cmd_mm2s_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        axis_cmd_mm2s_V_data_V_TDATA_blk_n = axis_cmd_mm2s_V_data_V_1_state[1'd1];
    end else begin
        axis_cmd_mm2s_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_fu_502_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        axis_cmd_s2mm_V_data_V_1_data_in = p_Result_s_fu_544_p5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd1))) begin
        axis_cmd_s2mm_V_data_V_1_data_in = 72'd0;
    end else begin
        axis_cmd_s2mm_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((axis_cmd_s2mm_V_data_V_1_sel == 1'b1)) begin
        axis_cmd_s2mm_V_data_V_1_data_out = axis_cmd_s2mm_V_data_V_1_payload_B;
    end else begin
        axis_cmd_s2mm_V_data_V_1_data_out = axis_cmd_s2mm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd1)) | ((exitcond1_fu_502_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io)))) begin
        axis_cmd_s2mm_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_cmd_s2mm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state38) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd1)) | ((exitcond1_fu_502_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36)))) begin
        axis_cmd_s2mm_V_data_V_TDATA_blk_n = axis_cmd_s2mm_V_data_V_1_state[1'd1];
    end else begin
        axis_cmd_s2mm_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        axis_s2mm_TDATA_blk_n = axis_s2mm_V_data_V_1_state[1'd1];
    end else begin
        axis_s2mm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((axis_s2mm_V_data_V_1_sel == 1'b1)) begin
        axis_s2mm_V_data_V_1_data_out = axis_s2mm_V_data_V_1_payload_B;
    end else begin
        axis_s2mm_V_data_V_1_data_out = axis_s2mm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state40))) begin
        axis_s2mm_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_s2mm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state40))) begin
        axis_s2mm_V_last_V_1_vld_in = 1'b1;
    end else begin
        axis_s2mm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1847)) begin
        if ((state_V == 3'd3)) begin
            darius_driver_ARADDR = 32'd0;
        end else if ((state_V == 3'd4)) begin
            darius_driver_ARADDR = 64'd52;
        end else begin
            darius_driver_ARADDR = 'bx;
        end
    end else begin
        darius_driver_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (ap_reg_ioackin_darius_driver_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd4)) | ((ap_start == 1'b1) & (ap_reg_ioackin_darius_driver_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd3)))) begin
        darius_driver_ARVALID = 1'b1;
    end else begin
        darius_driver_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (darius_driver_BVALID == 1'b1))) begin
        darius_driver_AWADDR = 64'd28;
    end else if (((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19))) begin
        darius_driver_AWADDR = 64'd24;
    end else if ((((exitcond_fu_469_p2 == 1'd1) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_s_fu_633_p2 == 1'd0) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)))) begin
        darius_driver_AWADDR = 32'd0;
    end else begin
        darius_driver_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (darius_driver_BVALID == 1'b1))) begin
        darius_driver_AWLEN = 32'd34;
    end else if ((((exitcond_fu_469_p2 == 1'd1) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_s_fu_633_p2 == 1'd0) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)))) begin
        darius_driver_AWLEN = 32'd1;
    end else begin
        darius_driver_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_fu_469_p2 == 1'd1) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (darius_driver_BVALID == 1'b1)) | ((ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_s_fu_633_p2 == 1'd0) & (ap_reg_ioackin_darius_driver_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)))) begin
        darius_driver_AWVALID = 1'b1;
    end else begin
        darius_driver_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((axis_s2mm_V_last_V_1_ack_in == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | ((darius_driver_BVALID == 1'b0) & (state_V_load_reg_678 == 3'd2))) & (1'b1 == ap_CS_fsm_state34) & (state_V_load_reg_678 == 3'd2)) | ((1'b1 == ap_CS_fsm_state33) & (darius_driver_BVALID == 1'b1)) | (~((ap_sig_ioackin_darius_driver_AWREADY == 1'b0) | (darius_driver_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state47) & (darius_driver_BVALID == 1'b1)))) begin
        darius_driver_BREADY = 1'b1;
    end else begin
        darius_driver_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (darius_driver_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (darius_driver_RVALID == 1'b1)))) begin
        darius_driver_RREADY = 1'b1;
    end else begin
        darius_driver_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42))) begin
        darius_driver_WDATA = 32'd0;
    end else if (((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        darius_driver_WDATA = 32'd1;
    end else if ((((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20)))) begin
        darius_driver_WDATA = reg_393;
    end else begin
        darius_driver_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20)) | ((ap_reg_ioackin_darius_driver_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)))) begin
        darius_driver_WVALID = 1'b1;
    end else begin
        darius_driver_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd4)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd3)))) begin
        darius_driver_blk_n_AR = m_axi_darius_driver_ARREADY;
    end else begin
        darius_driver_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | ((exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_s_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        darius_driver_blk_n_AW = m_axi_darius_driver_AWREADY;
    end else begin
        darius_driver_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state47) | ((1'b1 == ap_CS_fsm_state34) & (state_V_load_reg_678 == 3'd2)))) begin
        darius_driver_blk_n_B = m_axi_darius_driver_BVALID;
    end else begin
        darius_driver_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state17))) begin
        darius_driver_blk_n_R = m_axi_darius_driver_RVALID;
    end else begin
        darius_driver_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state42))) begin
        darius_driver_blk_n_W = m_axi_darius_driver_WREADY;
    end else begin
        darius_driver_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        darius_info_address0 = tmp_9_fu_673_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        darius_info_address0 = tmp_6_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        darius_info_address0 = 6'd0;
    end else begin
        darius_info_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io)))) begin
        darius_info_ce0 = 1'b1;
    end else begin
        darius_info_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        darius_info_we0 = 1'b1;
    end else begin
        darius_info_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state37))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state40)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state40)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        stream_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (state_V_load_load_fu_399_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if ((~(state_V_load_load_fu_399_p1 == 3'd2) & ~(state_V_load_load_fu_399_p1 == 3'd0) & ~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & ~(state_V == 3'd4) & ~(state_V == 3'd3) & ~(state_V == 3'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V_load_load_fu_399_p1 == 3'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state_V == 3'd4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (darius_driver_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10_io))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (darius_driver_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_darius_driver_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if ((~((ap_sig_ioackin_darius_driver_AWREADY == 1'b0) | (darius_driver_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_block_state26_io))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (darius_driver_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((axis_s2mm_V_last_V_1_ack_in == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | ((darius_driver_BVALID == 1'b0) & (state_V_load_reg_678 == 3'd2))) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((exitcond1_fu_502_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else if (((exitcond1_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36) & (1'b0 == ap_block_state36_io))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((axis_cmd_s2mm_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((tmp_s_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_block_state39_io))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else if (((tmp_s_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_block_state39_io))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((axis_s2mm_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (ap_sig_ioackin_darius_driver_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (darius_driver_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((exitcond2_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((exitcond3_fu_656_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = (((ap_sig_ioackin_darius_driver_ARREADY == 1'b0) & (state_V == 3'd4)) | ((ap_sig_ioackin_darius_driver_ARREADY == 1'b0) & (state_V == 3'd3)) | ((axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) & (state_V == 3'd1)));
end

always @ (*) begin
    ap_block_state26_io = ((exitcond_fu_469_p2 == 1'd1) & (ap_sig_ioackin_darius_driver_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((axis_s2mm_V_last_V_1_ack_in == 1'b0) | (axis_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0) | (axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | ((darius_driver_BVALID == 1'b0) & (state_V_load_reg_678 == 3'd2)));
end

always @ (*) begin
    ap_block_state36_io = ((exitcond1_fu_502_p2 == 1'd1) & (axis_cmd_s2mm_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state39_io = ((tmp_s_fu_633_p2 == 1'd0) & (ap_sig_ioackin_darius_driver_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((axis_cmd_mm2s_V_data_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_1847 = ((ap_start == 1'b1) & (ap_reg_ioackin_darius_driver_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_cmd_mm2s_V_data_V_1_ack_in = axis_cmd_mm2s_V_data_V_1_state[1'd1];

assign axis_cmd_mm2s_V_data_V_1_ack_out = axis_cmd_mm2s_V_data_V_TREADY;

assign axis_cmd_mm2s_V_data_V_1_data_out = 72'd0;

assign axis_cmd_mm2s_V_data_V_1_sel = axis_cmd_mm2s_V_data_V_1_sel_rd;

assign axis_cmd_mm2s_V_data_V_1_vld_out = axis_cmd_mm2s_V_data_V_1_state[1'd0];

assign axis_cmd_mm2s_V_data_V_TDATA = axis_cmd_mm2s_V_data_V_1_data_out;

assign axis_cmd_mm2s_V_data_V_TVALID = axis_cmd_mm2s_V_data_V_1_state[1'd0];

assign axis_cmd_s2mm_V_data_V_1_ack_in = axis_cmd_s2mm_V_data_V_1_state[1'd1];

assign axis_cmd_s2mm_V_data_V_1_ack_out = axis_cmd_s2mm_V_data_V_TREADY;

assign axis_cmd_s2mm_V_data_V_1_load_A = (~axis_cmd_s2mm_V_data_V_1_sel_wr & axis_cmd_s2mm_V_data_V_1_state_cmp_full);

assign axis_cmd_s2mm_V_data_V_1_load_B = (axis_cmd_s2mm_V_data_V_1_state_cmp_full & axis_cmd_s2mm_V_data_V_1_sel_wr);

assign axis_cmd_s2mm_V_data_V_1_sel = axis_cmd_s2mm_V_data_V_1_sel_rd;

assign axis_cmd_s2mm_V_data_V_1_state_cmp_full = ((axis_cmd_s2mm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_cmd_s2mm_V_data_V_1_vld_out = axis_cmd_s2mm_V_data_V_1_state[1'd0];

assign axis_cmd_s2mm_V_data_V_TDATA = axis_cmd_s2mm_V_data_V_1_data_out;

assign axis_cmd_s2mm_V_data_V_TVALID = axis_cmd_s2mm_V_data_V_1_state[1'd0];

assign axis_mm2s_TREADY = axis_mm2s_V_last_V_0_state[1'd1];

assign axis_mm2s_V_last_V_0_ack_out = 1'b0;

assign axis_mm2s_V_last_V_0_vld_in = axis_mm2s_TVALID;

assign axis_s2mm_TDATA = axis_s2mm_V_data_V_1_data_out;

assign axis_s2mm_TLAST = axis_s2mm_V_last_V_1_data_out;

assign axis_s2mm_TVALID = axis_s2mm_V_last_V_1_state[1'd0];

assign axis_s2mm_V_data_V_1_ack_in = axis_s2mm_V_data_V_1_state[1'd1];

assign axis_s2mm_V_data_V_1_ack_out = axis_s2mm_TREADY;

assign axis_s2mm_V_data_V_1_load_A = (~axis_s2mm_V_data_V_1_sel_wr & axis_s2mm_V_data_V_1_state_cmp_full);

assign axis_s2mm_V_data_V_1_load_B = (axis_s2mm_V_data_V_1_state_cmp_full & axis_s2mm_V_data_V_1_sel_wr);

assign axis_s2mm_V_data_V_1_sel = axis_s2mm_V_data_V_1_sel_rd;

assign axis_s2mm_V_data_V_1_state_cmp_full = ((axis_s2mm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_s2mm_V_data_V_1_vld_out = axis_s2mm_V_data_V_1_state[1'd0];

assign axis_s2mm_V_last_V_1_ack_in = axis_s2mm_V_last_V_1_state[1'd1];

assign axis_s2mm_V_last_V_1_ack_out = axis_s2mm_TREADY;

assign axis_s2mm_V_last_V_1_data_out = 1'd0;

assign axis_s2mm_V_last_V_1_sel = axis_s2mm_V_last_V_1_sel_rd;

assign axis_s2mm_V_last_V_1_vld_out = axis_s2mm_V_last_V_1_state[1'd0];

assign darius_info_d0 = stream_in_V_data_V_0_data_out[31:0];

assign exitcond1_fu_502_p2 = ((i_reg_337 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_644_p2 = ((i3_reg_359 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_656_p2 = ((i5_reg_370 == 6'd35) ? 1'b1 : 1'b0);

assign exitcond_fu_469_p2 = ((i2_reg_326 == 6'd34) ? 1'b1 : 1'b0);

assign gp_data_V_fu_431_p1 = val_assign_fu_420_p2;

assign i1_cast_fu_629_p1 = i1_reg_348;

assign i_1_fu_508_p2 = (i_reg_337 + 2'd1);

assign i_2_fu_475_p2 = (i2_reg_326 + 6'd1);

assign i_3_fu_638_p2 = (i1_reg_348 + 29'd1);

assign i_4_fu_650_p2 = (i3_reg_359 + 3'd1);

assign i_5_fu_662_p2 = (i5_reg_370 + 6'd1);

assign loc_V_trunc_fu_536_p1 = $signed(tmp_5_fu_526_p4);

assign p_Result_s_fu_544_p5 = {{{{{{8'd0}, {loc_V_trunc_fu_536_p1}}}, {9'd129}}}, {tmp_3_fu_540_p1}};

assign p_lshr_cast_fu_581_p1 = tmp_fu_571_p4;

assign p_lshr_f_cast_fu_601_p1 = tmp_7_fu_591_p4;

assign p_neg_fu_565_p2 = (32'd0 - parameter_mem_info_1);

assign p_neg_t_fu_585_p2 = (30'd0 - p_lshr_cast_fu_581_p1);

assign state_V_load_load_fu_399_p1 = state_V;

assign storemerge_fu_441_p3 = ((tmp_4_fu_436_p2[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign stream_in_TREADY = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TVALID = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_data_out = 8'd0;

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_data_out = 8'd0;

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_data_out = 1'd0;

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign tmp_10_fu_613_p1 = stream_in_V_data_V_0_data_out[31:0];

assign tmp_11_fu_514_p1 = i_reg_337[0:0];

assign tmp_1_fu_605_p3 = ((tmp_8_fu_557_p3[0:0] === 1'b1) ? p_neg_t_fu_585_p2 : p_lshr_f_cast_fu_601_p1);

assign tmp_2_fu_492_p1 = stream_in_V_data_V_0_data_out[31:0];

assign tmp_3_fu_540_p1 = parameter_mem_info_1[22:0];

assign tmp_4_fu_436_p2 = ((darius_driver_read_reg_698 == 32'd6) ? 1'b1 : 1'b0);

assign tmp_5_fu_526_p4 = {{parameter_mem_info_0[31:2]}};

assign tmp_6_fu_481_p1 = i_2_fu_475_p2;

assign tmp_7_fu_591_p4 = {{parameter_mem_info_1[31:3]}};

assign tmp_8_fu_557_p3 = parameter_mem_info_1[32'd31];

assign tmp_9_fu_673_p1 = i5_reg_370;

assign tmp_fu_571_p4 = {{p_neg_fu_565_p2[31:3]}};

assign tmp_s_fu_633_p2 = (($signed(i1_cast_fu_629_p1) < $signed(tmp_1_reg_745)) ? 1'b1 : 1'b0);

assign val_assign_fu_420_p2 = (darius_driver_addr_2_1_reg_688 + cumulative_cycle_cou);

endmodule //dariusController_raw
