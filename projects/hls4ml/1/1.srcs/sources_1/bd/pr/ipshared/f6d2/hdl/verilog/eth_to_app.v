// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module eth_to_app (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_address_V_dout,
        mac_address_V_empty_n,
        mac_address_V_read,
        from_eth_V_dout,
        from_eth_V_empty_n,
        from_eth_V_read,
        to_app_V_din,
        to_app_V_full_n,
        to_app_V_write,
        observedAddress_out_s,
        observedAddress_out_s_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] mac_address_V_dout;
input   mac_address_V_empty_n;
output   mac_address_V_read;
input  [72:0] from_eth_V_dout;
input   from_eth_V_empty_n;
output   from_eth_V_read;
output  [80:0] to_app_V_din;
input   to_app_V_full_n;
output   to_app_V_write;
output  [47:0] observedAddress_out_s;
output   observedAddress_out_s_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_address_V_read;
reg from_eth_V_read;
reg to_app_V_write;
reg observedAddress_out_s_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] grp_nbreadreq_fu_100_p3;
reg    ap_predicate_op7_read_state1;
reg    ap_predicate_op16_read_state1;
reg    ap_predicate_op27_read_state1;
reg    ap_predicate_op34_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [2:0] state_V_1_load_reg_354;
reg   [0:0] tmp_2_reg_362;
reg    ap_predicate_op56_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] state_V_1;
reg   [7:0] dest_V;
reg   [0:0] app_packet_out_last_s;
reg    from_eth_V_blk_n;
wire    ap_block_pp0_stage0;
reg    to_app_V_blk_n;
reg    mac_address_V_blk_n;
reg   [7:0] tmp_tkeep_V_reg_366;
wire   [64:0] tmp_11_fu_211_p1;
reg   [64:0] tmp_11_reg_371;
wire   [47:0] observedAddress_V_fu_305_p7;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4;
wire   [0:0] grp_fu_161_p3;
wire   [0:0] ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_128;
wire   [47:0] ap_phi_reg_pp0_iter0_p_066_1_i_reg_137;
reg   [47:0] ap_phi_reg_pp0_iter1_p_066_1_i_reg_137;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] storemerge_cast_i_fu_180_p1;
wire   [2:0] storemerge2_cast_i_c_fu_215_p3;
wire   [2:0] storemerge1_cast_i_c_fu_327_p3;
wire   [0:0] not_tmp_last_V_4_loa_fu_174_p2;
wire   [7:0] tmp_4_fu_251_p1;
wire   [7:0] tmp_5_fu_255_p4;
wire   [7:0] tmp_6_fu_265_p4;
wire   [7:0] tmp_8_fu_285_p4;
wire   [7:0] tmp_7_fu_275_p4;
wire   [7:0] tmp_9_fu_295_p4;
wire   [0:0] tmp_i_fu_321_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_195;
reg    ap_condition_102;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 state_V_1 = 3'd0;
#0 dest_V = 8'd0;
#0 app_packet_out_last_s = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_102)) begin
        if (((grp_nbreadreq_fu_100_p3 == 1'd1) & (state_V_1 == 3'd0))) begin
            ap_phi_reg_pp0_iter1_p_066_1_i_reg_137 <= observedAddress_V_fu_305_p7;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_066_1_i_reg_137 <= ap_phi_reg_pp0_iter0_p_066_1_i_reg_137;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_102)) begin
        if ((ap_predicate_op34_read_state1 == 1'b1)) begin
                        state_V_1[1 : 0] <= storemerge1_cast_i_c_fu_327_p3[1 : 0];
        end else if ((ap_predicate_op27_read_state1 == 1'b1)) begin
                        state_V_1[0] <= 1'b1;
            state_V_1[1] <= 1'b1;
        end else if ((state_V_1 == 3'd3)) begin
                        state_V_1[1 : 0] <= storemerge2_cast_i_c_fu_215_p3[1 : 0];
        end else if ((ap_predicate_op7_read_state1 == 1'b1)) begin
                        state_V_1[1 : 0] <= storemerge_cast_i_fu_180_p1[1 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        app_packet_out_last_s <= from_eth_V_dout[32'd64];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_read_state1 == 1'b1))) begin
        dest_V <= {{from_eth_V_dout[55:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_V_1_load_reg_354[1 : 0] <= state_V_1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        tmp_11_reg_371 <= tmp_11_fu_211_p1;
        tmp_tkeep_V_reg_366 <= {{from_eth_V_dout[72:65]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V_1 == 3'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_362 <= from_eth_V_empty_n;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_195)) begin
        if ((grp_nbreadreq_fu_100_p3 == 1'd0)) begin
            ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4 = app_packet_out_last_s;
        end else if ((grp_nbreadreq_fu_100_p3 == 1'd1)) begin
            ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4 = from_eth_V_dout[32'd64];
        end else begin
            ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_128;
        end
    end else begin
        ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op7_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        from_eth_V_blk_n = from_eth_V_empty_n;
    end else begin
        from_eth_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op7_read_state1 == 1'b1)))) begin
        from_eth_V_read = 1'b1;
    end else begin
        from_eth_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_address_V_blk_n = mac_address_V_empty_n;
    end else begin
        mac_address_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_address_V_read = 1'b1;
    end else begin
        mac_address_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        observedAddress_out_s_ap_vld = 1'b1;
    end else begin
        observedAddress_out_s_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op56_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        to_app_V_blk_n = to_app_V_full_n;
    end else begin
        to_app_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op56_write_state2 == 1'b1))) begin
        to_app_V_write = 1'b1;
    end else begin
        to_app_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op56_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (mac_address_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op27_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op7_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op56_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (mac_address_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op27_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op7_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op56_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (mac_address_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op27_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op7_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (mac_address_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op27_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((from_eth_V_empty_n == 1'b0) & (ap_predicate_op7_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((to_app_V_full_n == 1'b0) & (ap_predicate_op56_write_state2 == 1'b1));
end

always @ (*) begin
    ap_condition_102 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_195 = ((state_V_1 == 3'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_128 = 'bx;

assign ap_phi_reg_pp0_iter0_p_066_1_i_reg_137 = 'bx;

always @ (*) begin
    ap_predicate_op16_read_state1 = ((grp_nbreadreq_fu_100_p3 == 1'd1) & (state_V_1 == 3'd3));
end

always @ (*) begin
    ap_predicate_op27_read_state1 = ((grp_nbreadreq_fu_100_p3 == 1'd1) & (state_V_1 == 3'd2));
end

always @ (*) begin
    ap_predicate_op34_read_state1 = ((grp_nbreadreq_fu_100_p3 == 1'd1) & (state_V_1 == 3'd0));
end

always @ (*) begin
    ap_predicate_op56_write_state2 = ((state_V_1_load_reg_354 == 3'd3) & (tmp_2_reg_362 == 1'd1));
end

always @ (*) begin
    ap_predicate_op7_read_state1 = ((grp_nbreadreq_fu_100_p3 == 1'd1) & (state_V_1 == 3'd1));
end

assign grp_fu_161_p3 = from_eth_V_dout[32'd64];

assign grp_nbreadreq_fu_100_p3 = from_eth_V_empty_n;

assign not_tmp_last_V_4_loa_fu_174_p2 = (grp_fu_161_p3 ^ 1'd1);

assign observedAddress_V_fu_305_p7 = {{{{{{tmp_4_fu_251_p1}, {tmp_5_fu_255_p4}}, {tmp_6_fu_265_p4}}, {tmp_8_fu_285_p4}}, {tmp_7_fu_275_p4}}, {tmp_9_fu_295_p4}};

assign observedAddress_out_s = ap_phi_reg_pp0_iter1_p_066_1_i_reg_137;

assign storemerge1_cast_i_c_fu_327_p3 = ((tmp_i_fu_321_p2[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign storemerge2_cast_i_c_fu_215_p3 = ((ap_phi_mux_app_packet_out_last_2_phi_fu_131_p4[0:0] === 1'b1) ? 3'd0 : 3'd3);

assign storemerge_cast_i_fu_180_p1 = not_tmp_last_V_4_loa_fu_174_p2;

assign tmp_11_fu_211_p1 = from_eth_V_dout[64:0];

assign tmp_4_fu_251_p1 = from_eth_V_dout[7:0];

assign tmp_5_fu_255_p4 = {{from_eth_V_dout[15:8]}};

assign tmp_6_fu_265_p4 = {{from_eth_V_dout[23:16]}};

assign tmp_7_fu_275_p4 = {{from_eth_V_dout[39:32]}};

assign tmp_8_fu_285_p4 = {{from_eth_V_dout[31:24]}};

assign tmp_9_fu_295_p4 = {{from_eth_V_dout[47:40]}};

assign tmp_i_fu_321_p2 = ((observedAddress_V_fu_305_p7 == mac_address_V_dout) ? 1'b1 : 1'b0);

assign to_app_V_din = {{{tmp_tkeep_V_reg_366}, {dest_V}}, {tmp_11_reg_371}};

always @ (posedge ap_clk) begin
    state_V_1_load_reg_354[2] <= 1'b0;
    state_V_1[2] <= 1'b0;
end

endmodule //eth_to_app
