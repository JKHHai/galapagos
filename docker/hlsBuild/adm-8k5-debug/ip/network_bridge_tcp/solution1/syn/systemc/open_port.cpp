// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "open_port.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic open_port::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic open_port::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> open_port::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> open_port::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool open_port::ap_const_boolean_1 = true;
const sc_lv<1> open_port::ap_const_lv1_1 = "1";
const sc_lv<1> open_port::ap_const_lv1_0 = "0";
const bool open_port::ap_const_boolean_0 = false;
const sc_lv<16> open_port::ap_const_lv16_7 = "111";
const sc_lv<32> open_port::ap_const_lv32_10 = "10000";
const sc_lv<32> open_port::ap_const_lv32_1F = "11111";
const sc_lv<16> open_port::ap_const_lv16_0 = "0000000000000000";

open_port::open_port(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( listenPortStatus_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( notifications_V_empty_n );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( listenPort_V_V_full_n );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( readRequest_V_full_n );
    sensitive << ( ap_predicate_op34_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( listenPortStatus_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( notifications_V_empty_n );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( listenPort_V_V_full_n );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( readRequest_V_full_n );
    sensitive << ( ap_predicate_op34_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( listenPortStatus_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( notifications_V_empty_n );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( listenPort_V_V_full_n );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( readRequest_V_full_n );
    sensitive << ( ap_predicate_op34_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( listenPortStatus_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( notifications_V_empty_n );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( listenPort_V_V_full_n );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( readRequest_V_full_n );
    sensitive << ( ap_predicate_op34_write_state2 );

    SC_METHOD(thread_ap_condition_96);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op11_read_state1);
    sensitive << ( brmerge_fu_117_p2 );
    sensitive << ( tmp_nbreadreq_fu_66_p3 );
    sensitive << ( waitPortStatus );

    SC_METHOD(thread_ap_predicate_op34_write_state2);
    sensitive << ( tmp_2_reg_173 );
    sensitive << ( tmp_s_reg_177 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_brmerge_fu_117_p2);
    sensitive << ( listenDone );
    sensitive << ( waitPortStatus );

    SC_METHOD(thread_listenPortStatus_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( listenPortStatus_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_listenPortStatus_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_listenPort_V_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( listenPort_V_V_full_n );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_listenPort_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_listenPort_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( brmerge_reg_165 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_notifications_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( notifications_V_empty_n );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_notifications_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_readRequest_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( readRequest_V_full_n );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_readRequest_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( tmp_1_reg_181 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_readRequest_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_1_fu_157_p1);
    sensitive << ( notifications_V_dout );

    SC_METHOD(thread_tmp_2_nbreadreq_fu_80_p3);
    sensitive << ( notifications_V_empty_n );

    SC_METHOD(thread_tmp_length_V_fu_141_p4);
    sensitive << ( notifications_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_66_p3);
    sensitive << ( listenPortStatus_V_empty_n );

    SC_METHOD(thread_tmp_s_fu_151_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_2_nbreadreq_fu_80_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_length_V_fu_141_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    listenDone = "0";
    waitPortStatus = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "open_port_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, listenPortStatus_V_dout, "(port)listenPortStatus_V_dout");
    sc_trace(mVcdFile, listenPortStatus_V_empty_n, "(port)listenPortStatus_V_empty_n");
    sc_trace(mVcdFile, listenPortStatus_V_read, "(port)listenPortStatus_V_read");
    sc_trace(mVcdFile, notifications_V_dout, "(port)notifications_V_dout");
    sc_trace(mVcdFile, notifications_V_empty_n, "(port)notifications_V_empty_n");
    sc_trace(mVcdFile, notifications_V_read, "(port)notifications_V_read");
    sc_trace(mVcdFile, listenPort_V_V_din, "(port)listenPort_V_V_din");
    sc_trace(mVcdFile, listenPort_V_V_full_n, "(port)listenPort_V_V_full_n");
    sc_trace(mVcdFile, listenPort_V_V_write, "(port)listenPort_V_V_write");
    sc_trace(mVcdFile, readRequest_V_din, "(port)readRequest_V_din");
    sc_trace(mVcdFile, readRequest_V_full_n, "(port)readRequest_V_full_n");
    sc_trace(mVcdFile, readRequest_V_write, "(port)readRequest_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, brmerge_fu_117_p2, "brmerge_fu_117_p2");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_66_p3, "tmp_nbreadreq_fu_66_p3");
    sc_trace(mVcdFile, ap_predicate_op11_read_state1, "ap_predicate_op11_read_state1");
    sc_trace(mVcdFile, tmp_2_nbreadreq_fu_80_p3, "tmp_2_nbreadreq_fu_80_p3");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, brmerge_reg_165, "brmerge_reg_165");
    sc_trace(mVcdFile, tmp_2_reg_173, "tmp_2_reg_173");
    sc_trace(mVcdFile, tmp_s_reg_177, "tmp_s_reg_177");
    sc_trace(mVcdFile, ap_predicate_op34_write_state2, "ap_predicate_op34_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, listenDone, "listenDone");
    sc_trace(mVcdFile, waitPortStatus, "waitPortStatus");
    sc_trace(mVcdFile, listenPort_V_V_blk_n, "listenPort_V_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, listenPortStatus_V_blk_n, "listenPortStatus_V_blk_n");
    sc_trace(mVcdFile, notifications_V_blk_n, "notifications_V_blk_n");
    sc_trace(mVcdFile, readRequest_V_blk_n, "readRequest_V_blk_n");
    sc_trace(mVcdFile, tmp_s_fu_151_p2, "tmp_s_fu_151_p2");
    sc_trace(mVcdFile, tmp_1_fu_157_p1, "tmp_1_fu_157_p1");
    sc_trace(mVcdFile, tmp_1_reg_181, "tmp_1_reg_181");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_length_V_fu_141_p4, "tmp_length_V_fu_141_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_96, "ap_condition_96");
#endif

    }
}

open_port::~open_port() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void open_port::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_96.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) {
            waitPortStatus = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(brmerge_fu_117_p2.read(), ap_const_lv1_0)) {
            waitPortStatus = ap_const_lv1_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        brmerge_reg_165 = brmerge_fu_117_p2.read();
        tmp_2_reg_173 =  (sc_lv<1>) (notifications_V_empty_n.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        listenDone =  (sc_lv<1>) (listenPortStatus_V_dout.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_151_p2.read()))) {
        tmp_1_reg_181 = tmp_1_fu_157_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_s_reg_177 = tmp_s_fu_151_p2.read();
    }
}

void open_port::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void open_port::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void open_port::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, listenPortStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, notifications_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, listenPort_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, readRequest_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_port::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, listenPortStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, notifications_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, listenPort_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, readRequest_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_port::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, listenPortStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, notifications_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, listenPort_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, readRequest_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_port::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, listenPortStatus_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, notifications_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void open_port::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, listenPort_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_0, readRequest_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read())));
}

void open_port::thread_ap_condition_96() {
    ap_condition_96 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void open_port::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void open_port::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void open_port::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void open_port::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void open_port::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void open_port::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void open_port::thread_ap_predicate_op11_read_state1() {
    ap_predicate_op11_read_state1 = (esl_seteq<1,1,1>(brmerge_fu_117_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, waitPortStatus.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_66_p3.read()));
}

void open_port::thread_ap_predicate_op34_write_state2() {
    ap_predicate_op34_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_173.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_177.read()));
}

void open_port::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void open_port::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void open_port::thread_brmerge_fu_117_p2() {
    brmerge_fu_117_p2 = (listenDone.read() | waitPortStatus.read());
}

void open_port::thread_listenPortStatus_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        listenPortStatus_V_blk_n = listenPortStatus_V_empty_n.read();
    } else {
        listenPortStatus_V_blk_n = ap_const_logic_1;
    }
}

void open_port::thread_listenPortStatus_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        listenPortStatus_V_read = ap_const_logic_1;
    } else {
        listenPortStatus_V_read = ap_const_logic_0;
    }
}

void open_port::thread_listenPort_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        listenPort_V_V_blk_n = listenPort_V_V_full_n.read();
    } else {
        listenPort_V_V_blk_n = ap_const_logic_1;
    }
}

void open_port::thread_listenPort_V_V_din() {
    listenPort_V_V_din = ap_const_lv16_7;
}

void open_port::thread_listenPort_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(brmerge_reg_165.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        listenPort_V_V_write = ap_const_logic_1;
    } else {
        listenPort_V_V_write = ap_const_logic_0;
    }
}

void open_port::thread_notifications_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        notifications_V_blk_n = notifications_V_empty_n.read();
    } else {
        notifications_V_blk_n = ap_const_logic_1;
    }
}

void open_port::thread_notifications_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_80_p3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        notifications_V_read = ap_const_logic_1;
    } else {
        notifications_V_read = ap_const_logic_0;
    }
}

void open_port::thread_readRequest_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        readRequest_V_blk_n = readRequest_V_full_n.read();
    } else {
        readRequest_V_blk_n = ap_const_logic_1;
    }
}

void open_port::thread_readRequest_V_din() {
    readRequest_V_din = tmp_1_reg_181.read();
}

void open_port::thread_readRequest_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        readRequest_V_write = ap_const_logic_1;
    } else {
        readRequest_V_write = ap_const_logic_0;
    }
}

void open_port::thread_tmp_1_fu_157_p1() {
    tmp_1_fu_157_p1 = notifications_V_dout.read().range(32-1, 0);
}

void open_port::thread_tmp_2_nbreadreq_fu_80_p3() {
    tmp_2_nbreadreq_fu_80_p3 =  (sc_lv<1>) (notifications_V_empty_n.read());
}

void open_port::thread_tmp_length_V_fu_141_p4() {
    tmp_length_V_fu_141_p4 = notifications_V_dout.read().range(31, 16);
}

void open_port::thread_tmp_nbreadreq_fu_66_p3() {
    tmp_nbreadreq_fu_66_p3 =  (sc_lv<1>) (listenPortStatus_V_empty_n.read());
}

void open_port::thread_tmp_s_fu_151_p2() {
    tmp_s_fu_151_p2 = (!tmp_length_V_fu_141_p4.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_length_V_fu_141_p4.read() == ap_const_lv16_0);
}

void open_port::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

