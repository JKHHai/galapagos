// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _tcp_to_galapagos_int_HH_
#define _tcp_to_galapagos_int_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct tcp_to_galapagos_int : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<73> > rxData_V_dout;
    sc_in< sc_logic > rxData_V_empty_n;
    sc_out< sc_logic > rxData_V_read;
    sc_in< sc_lv<16> > t2g_read_sid_V_V_dout;
    sc_in< sc_logic > t2g_read_sid_V_V_empty_n;
    sc_out< sc_logic > t2g_read_sid_V_V_read;
    sc_in< sc_lv<16> > rxMetaData_V_V_dout;
    sc_in< sc_logic > rxMetaData_V_V_empty_n;
    sc_out< sc_logic > rxMetaData_V_V_read;
    sc_out< sc_lv<73> > txGalapagosBridge_V_din;
    sc_in< sc_logic > txGalapagosBridge_V_full_n;
    sc_out< sc_logic > txGalapagosBridge_V_write;
    sc_out< sc_lv<8> > t2g_write_dest_V_V_din;
    sc_in< sc_logic > t2g_write_dest_V_V_full_n;
    sc_out< sc_logic > t2g_write_dest_V_V_write;
    sc_out< sc_lv<16> > t2g_write_sid_V_V_din;
    sc_in< sc_logic > t2g_write_sid_V_V_full_n;
    sc_out< sc_logic > t2g_write_sid_V_V_write;
    sc_out< sc_lv<8> > t2g_read_dest_V_V_din;
    sc_in< sc_logic > t2g_read_dest_V_V_full_n;
    sc_out< sc_logic > t2g_read_dest_V_V_write;


    // Module declarations
    tcp_to_galapagos_int(sc_module_name name);
    SC_HAS_PROCESS(tcp_to_galapagos_int);

    ~tcp_to_galapagos_int();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<3> > state_load_load_fu_168_p1;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_98_p3;
    sc_signal< bool > ap_predicate_op6_read_state1;
    sc_signal< sc_lv<1> > tmp_2_nbreadreq_fu_112_p3;
    sc_signal< bool > ap_predicate_op12_read_state1;
    sc_signal< bool > ap_predicate_op17_read_state1;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_132_p3;
    sc_signal< bool > ap_predicate_op29_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<3> > state_load_reg_317;
    sc_signal< sc_lv<1> > tmp_3_reg_321;
    sc_signal< bool > ap_predicate_op45_write_state2;
    sc_signal< sc_lv<1> > tmp_1_reg_334;
    sc_signal< bool > ap_predicate_op64_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > state;
    sc_signal< sc_lv<16> > sessionID_V_1;
    sc_signal< sc_lv<64> > currWord_data_V;
    sc_signal< sc_lv<8> > currWord_keep_V;
    sc_signal< sc_lv<1> > currWord_last_V;
    sc_signal< sc_lv<8> > src_V;
    sc_signal< sc_logic > rxMetaData_V_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > rxData_V_blk_n;
    sc_signal< sc_logic > txGalapagosBridge_V_blk_n;
    sc_signal< sc_logic > t2g_read_dest_V_V_blk_n;
    sc_signal< sc_logic > t2g_read_sid_V_V_blk_n;
    sc_signal< sc_logic > t2g_write_dest_V_V_blk_n;
    sc_signal< sc_logic > t2g_write_sid_V_V_blk_n;
    sc_signal< sc_lv<73> > tmp_227_reg_325;
    sc_signal< sc_lv<8> > tmp_V_3_reg_338;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<73> > tmp_11_fu_296_p4;
    sc_signal< sc_lv<3> > storemerge_i_fu_196_p3;
    sc_signal< sc_lv<64> > p_Val2_s_fu_210_p1;
    sc_signal< sc_lv<1> > tmp_i_fu_190_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_216;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<16> ap_const_lv16_3E8;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_47;
    static const sc_lv<32> ap_const_lv32_48;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_216();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op12_read_state1();
    void thread_ap_predicate_op17_read_state1();
    void thread_ap_predicate_op29_read_state1();
    void thread_ap_predicate_op45_write_state2();
    void thread_ap_predicate_op64_write_state2();
    void thread_ap_predicate_op6_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_nbreadreq_fu_98_p3();
    void thread_p_Val2_s_fu_210_p1();
    void thread_rxData_V_blk_n();
    void thread_rxData_V_read();
    void thread_rxMetaData_V_V_blk_n();
    void thread_rxMetaData_V_V_read();
    void thread_state_load_load_fu_168_p1();
    void thread_storemerge_i_fu_196_p3();
    void thread_t2g_read_dest_V_V_blk_n();
    void thread_t2g_read_dest_V_V_din();
    void thread_t2g_read_dest_V_V_write();
    void thread_t2g_read_sid_V_V_blk_n();
    void thread_t2g_read_sid_V_V_read();
    void thread_t2g_write_dest_V_V_blk_n();
    void thread_t2g_write_dest_V_V_din();
    void thread_t2g_write_dest_V_V_write();
    void thread_t2g_write_sid_V_V_blk_n();
    void thread_t2g_write_sid_V_V_din();
    void thread_t2g_write_sid_V_V_write();
    void thread_tmp_11_fu_296_p4();
    void thread_tmp_2_nbreadreq_fu_112_p3();
    void thread_tmp_i_fu_190_p2();
    void thread_tmp_nbreadreq_fu_132_p3();
    void thread_txGalapagosBridge_V_blk_n();
    void thread_txGalapagosBridge_V_din();
    void thread_txGalapagosBridge_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
