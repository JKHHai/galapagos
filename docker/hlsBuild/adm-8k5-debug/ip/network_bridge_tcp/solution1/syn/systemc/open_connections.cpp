// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "open_connections.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic open_connections::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic open_connections::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> open_connections::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> open_connections::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool open_connections::ap_const_boolean_1 = true;
const sc_lv<1> open_connections::ap_const_lv1_0 = "0";
const sc_lv<1> open_connections::ap_const_lv1_1 = "1";
const bool open_connections::ap_const_boolean_0 = false;
const sc_lv<16> open_connections::ap_const_lv16_7 = "111";

open_connections::open_connections(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( openConStatus_V_empty_n );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( openConnection_V_full_n );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( sessionID_fifo_V_V_full_n );
    sensitive << ( ap_predicate_op26_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( openConStatus_V_empty_n );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( openConnection_V_full_n );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( sessionID_fifo_V_V_full_n );
    sensitive << ( ap_predicate_op26_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( openConStatus_V_empty_n );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( openConnection_V_full_n );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( sessionID_fifo_V_V_full_n );
    sensitive << ( ap_predicate_op26_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( openConStatus_V_empty_n );
    sensitive << ( ap_predicate_op13_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( openConnection_V_full_n );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( sessionID_fifo_V_V_full_n );
    sensitive << ( ap_predicate_op26_write_state2 );

    SC_METHOD(thread_ap_condition_97);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op13_read_state1);
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( tmp_13_nbreadreq_fu_70_p3 );
    sensitive << ( wait_for_connection );

    SC_METHOD(thread_ap_predicate_op26_write_state2);
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( wait_for_connection_s_reg_138 );
    sensitive << ( tmp_13_reg_151 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_brmerge_i_fu_108_p2);
    sensitive << ( wait_for_connection );
    sensitive << ( tmp_not_i_fu_102_p2 );

    SC_METHOD(thread_ip_fifo_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ip_fifo_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( brmerge_i_fu_108_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_openConStatus_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( openConStatus_V_empty_n );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_openConStatus_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_openConnection_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( openConnection_V_full_n );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_openConnection_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( tmp_V_12_reg_146 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_openConnection_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( brmerge_i_reg_142 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_sessionID_fifo_V_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( sessionID_fifo_V_V_full_n );
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_sessionID_fifo_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( tmp_V_reg_155 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_sessionID_fifo_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_13_nbreadreq_fu_70_p3);
    sensitive << ( openConStatus_V_empty_n );

    SC_METHOD(thread_tmp_V_fu_120_p1);
    sensitive << ( openConStatus_V_dout );

    SC_METHOD(thread_tmp_not_i_fu_102_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ip_fifo_V_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_not_i_fu_102_p2);
    sensitive << ( tmp_not_i_fu_102_p0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    wait_for_connection = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "open_connections_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ip_fifo_V_V_dout, "(port)ip_fifo_V_V_dout");
    sc_trace(mVcdFile, ip_fifo_V_V_empty_n, "(port)ip_fifo_V_V_empty_n");
    sc_trace(mVcdFile, ip_fifo_V_V_read, "(port)ip_fifo_V_V_read");
    sc_trace(mVcdFile, openConStatus_V_dout, "(port)openConStatus_V_dout");
    sc_trace(mVcdFile, openConStatus_V_empty_n, "(port)openConStatus_V_empty_n");
    sc_trace(mVcdFile, openConStatus_V_read, "(port)openConStatus_V_read");
    sc_trace(mVcdFile, openConnection_V_din, "(port)openConnection_V_din");
    sc_trace(mVcdFile, openConnection_V_full_n, "(port)openConnection_V_full_n");
    sc_trace(mVcdFile, openConnection_V_write, "(port)openConnection_V_write");
    sc_trace(mVcdFile, sessionID_fifo_V_V_din, "(port)sessionID_fifo_V_V_din");
    sc_trace(mVcdFile, sessionID_fifo_V_V_full_n, "(port)sessionID_fifo_V_V_full_n");
    sc_trace(mVcdFile, sessionID_fifo_V_V_write, "(port)sessionID_fifo_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, brmerge_i_fu_108_p2, "brmerge_i_fu_108_p2");
    sc_trace(mVcdFile, tmp_13_nbreadreq_fu_70_p3, "tmp_13_nbreadreq_fu_70_p3");
    sc_trace(mVcdFile, ap_predicate_op13_read_state1, "ap_predicate_op13_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, brmerge_i_reg_142, "brmerge_i_reg_142");
    sc_trace(mVcdFile, wait_for_connection_s_reg_138, "wait_for_connection_s_reg_138");
    sc_trace(mVcdFile, tmp_13_reg_151, "tmp_13_reg_151");
    sc_trace(mVcdFile, ap_predicate_op26_write_state2, "ap_predicate_op26_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, wait_for_connection, "wait_for_connection");
    sc_trace(mVcdFile, openConnection_V_blk_n, "openConnection_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, openConStatus_V_blk_n, "openConStatus_V_blk_n");
    sc_trace(mVcdFile, ip_fifo_V_V_blk_n, "ip_fifo_V_V_blk_n");
    sc_trace(mVcdFile, sessionID_fifo_V_V_blk_n, "sessionID_fifo_V_V_blk_n");
    sc_trace(mVcdFile, tmp_V_12_reg_146, "tmp_V_12_reg_146");
    sc_trace(mVcdFile, tmp_V_fu_120_p1, "tmp_V_fu_120_p1");
    sc_trace(mVcdFile, tmp_V_reg_155, "tmp_V_reg_155");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_not_i_fu_102_p0, "tmp_not_i_fu_102_p0");
    sc_trace(mVcdFile, tmp_not_i_fu_102_p2, "tmp_not_i_fu_102_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_97, "ap_condition_97");
#endif

    }
}

open_connections::~open_connections() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void open_connections::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_97.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) {
            wait_for_connection = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0)) {
            wait_for_connection = ap_const_lv1_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        brmerge_i_reg_142 = brmerge_i_fu_108_p2.read();
        wait_for_connection_s_reg_138 = wait_for_connection.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, wait_for_connection.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_13_reg_151 =  (sc_lv<1>) (openConStatus_V_empty_n.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_12_reg_146 = ip_fifo_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_155 = tmp_V_fu_120_p1.read();
    }
}

void open_connections::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void open_connections::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void open_connections::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ip_fifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, openConStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, openConnection_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, sessionID_fifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_connections::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ip_fifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, openConStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, openConnection_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, sessionID_fifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_connections::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ip_fifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, openConStatus_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, openConnection_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, sessionID_fifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void open_connections::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ip_fifo_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_0, openConStatus_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void open_connections::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, openConnection_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, sessionID_fifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read())));
}

void open_connections::thread_ap_condition_97() {
    ap_condition_97 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void open_connections::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void open_connections::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void open_connections::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void open_connections::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void open_connections::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void open_connections::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void open_connections::thread_ap_predicate_op13_read_state1() {
    ap_predicate_op13_read_state1 = (esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, wait_for_connection.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_nbreadreq_fu_70_p3.read()));
}

void open_connections::thread_ap_predicate_op26_write_state2() {
    ap_predicate_op26_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_i_reg_142.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, wait_for_connection_s_reg_138.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_151.read()));
}

void open_connections::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void open_connections::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void open_connections::thread_brmerge_i_fu_108_p2() {
    brmerge_i_fu_108_p2 = (wait_for_connection.read() | tmp_not_i_fu_102_p2.read());
}

void open_connections::thread_ip_fifo_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ip_fifo_V_V_blk_n = ip_fifo_V_V_empty_n.read();
    } else {
        ip_fifo_V_V_blk_n = ap_const_logic_1;
    }
}

void open_connections::thread_ip_fifo_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(brmerge_i_fu_108_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ip_fifo_V_V_read = ap_const_logic_1;
    } else {
        ip_fifo_V_V_read = ap_const_logic_0;
    }
}

void open_connections::thread_openConStatus_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        openConStatus_V_blk_n = openConStatus_V_empty_n.read();
    } else {
        openConStatus_V_blk_n = ap_const_logic_1;
    }
}

void open_connections::thread_openConStatus_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        openConStatus_V_read = ap_const_logic_1;
    } else {
        openConStatus_V_read = ap_const_logic_0;
    }
}

void open_connections::thread_openConnection_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        openConnection_V_blk_n = openConnection_V_full_n.read();
    } else {
        openConnection_V_blk_n = ap_const_logic_1;
    }
}

void open_connections::thread_openConnection_V_din() {
    openConnection_V_din = esl_concat<16,32>(ap_const_lv16_7, tmp_V_12_reg_146.read());
}

void open_connections::thread_openConnection_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_i_reg_142.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        openConnection_V_write = ap_const_logic_1;
    } else {
        openConnection_V_write = ap_const_logic_0;
    }
}

void open_connections::thread_sessionID_fifo_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sessionID_fifo_V_V_blk_n = sessionID_fifo_V_V_full_n.read();
    } else {
        sessionID_fifo_V_V_blk_n = ap_const_logic_1;
    }
}

void open_connections::thread_sessionID_fifo_V_V_din() {
    sessionID_fifo_V_V_din = tmp_V_reg_155.read();
}

void open_connections::thread_sessionID_fifo_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        sessionID_fifo_V_V_write = ap_const_logic_1;
    } else {
        sessionID_fifo_V_V_write = ap_const_logic_0;
    }
}

void open_connections::thread_tmp_13_nbreadreq_fu_70_p3() {
    tmp_13_nbreadreq_fu_70_p3 =  (sc_lv<1>) (openConStatus_V_empty_n.read());
}

void open_connections::thread_tmp_V_fu_120_p1() {
    tmp_V_fu_120_p1 = openConStatus_V_dout.read().range(16-1, 0);
}

void open_connections::thread_tmp_not_i_fu_102_p0() {
    tmp_not_i_fu_102_p0 =  (sc_lv<1>) (ip_fifo_V_V_empty_n.read());
}

void open_connections::thread_tmp_not_i_fu_102_p2() {
    tmp_not_i_fu_102_p2 = (tmp_not_i_fu_102_p0.read() ^ ap_const_lv1_1);
}

void open_connections::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

