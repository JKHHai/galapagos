// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _open_connections_HH_
#define _open_connections_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct open_connections : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > ip_fifo_V_V_dout;
    sc_in< sc_logic > ip_fifo_V_V_empty_n;
    sc_out< sc_logic > ip_fifo_V_V_read;
    sc_in< sc_lv<17> > openConStatus_V_dout;
    sc_in< sc_logic > openConStatus_V_empty_n;
    sc_out< sc_logic > openConStatus_V_read;
    sc_out< sc_lv<48> > openConnection_V_din;
    sc_in< sc_logic > openConnection_V_full_n;
    sc_out< sc_logic > openConnection_V_write;
    sc_out< sc_lv<16> > sessionID_fifo_V_V_din;
    sc_in< sc_logic > sessionID_fifo_V_V_full_n;
    sc_out< sc_logic > sessionID_fifo_V_V_write;


    // Module declarations
    open_connections(sc_module_name name);
    SC_HAS_PROCESS(open_connections);

    ~open_connections();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > brmerge_i_fu_108_p2;
    sc_signal< sc_lv<1> > tmp_13_nbreadreq_fu_70_p3;
    sc_signal< bool > ap_predicate_op13_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > brmerge_i_reg_142;
    sc_signal< sc_lv<1> > wait_for_connection_s_reg_138;
    sc_signal< sc_lv<1> > tmp_13_reg_151;
    sc_signal< bool > ap_predicate_op26_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > wait_for_connection;
    sc_signal< sc_logic > openConnection_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > openConStatus_V_blk_n;
    sc_signal< sc_logic > ip_fifo_V_V_blk_n;
    sc_signal< sc_logic > sessionID_fifo_V_V_blk_n;
    sc_signal< sc_lv<32> > tmp_V_12_reg_146;
    sc_signal< sc_lv<16> > tmp_V_fu_120_p1;
    sc_signal< sc_lv<16> > tmp_V_reg_155;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_not_i_fu_102_p0;
    sc_signal< sc_lv<1> > tmp_not_i_fu_102_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_97;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<16> ap_const_lv16_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_97();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op13_read_state1();
    void thread_ap_predicate_op26_write_state2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_brmerge_i_fu_108_p2();
    void thread_ip_fifo_V_V_blk_n();
    void thread_ip_fifo_V_V_read();
    void thread_openConStatus_V_blk_n();
    void thread_openConStatus_V_read();
    void thread_openConnection_V_blk_n();
    void thread_openConnection_V_din();
    void thread_openConnection_V_write();
    void thread_sessionID_fifo_V_V_blk_n();
    void thread_sessionID_fifo_V_V_din();
    void thread_sessionID_fifo_V_V_write();
    void thread_tmp_13_nbreadreq_fu_70_p3();
    void thread_tmp_V_fu_120_p1();
    void thread_tmp_not_i_fu_102_p0();
    void thread_tmp_not_i_fu_102_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
