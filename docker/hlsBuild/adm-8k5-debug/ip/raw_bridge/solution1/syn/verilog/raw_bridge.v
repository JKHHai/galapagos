// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="raw_bridge,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.108500,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=255,HLS_SYN_LUT=145}" *)

module raw_bridge (
        to_app_V_din,
        to_app_V_full_n,
        to_app_V_write,
        from_raw_V_dout,
        from_raw_V_empty_n,
        from_raw_V_read,
        from_app_V_dout,
        from_app_V_empty_n,
        from_app_V_read,
        to_raw_V_din,
        to_raw_V_full_n,
        to_raw_V_write,
        ap_clk,
        ap_rst
);


output  [88:0] to_app_V_din;
input   to_app_V_full_n;
output   to_app_V_write;
input  [72:0] from_raw_V_dout;
input   from_raw_V_empty_n;
output   from_raw_V_read;
input  [88:0] from_app_V_dout;
input   from_app_V_empty_n;
output   from_app_V_read;
output  [72:0] to_raw_V_din;
input   to_raw_V_full_n;
output   to_raw_V_write;
input   ap_clk;
input   ap_rst;

reg    raw_to_app_U0_ap_start;
wire    raw_to_app_U0_ap_done;
wire    raw_to_app_U0_ap_continue;
wire    raw_to_app_U0_ap_idle;
wire    raw_to_app_U0_ap_ready;
wire    raw_to_app_U0_from_raw_V_read;
wire   [88:0] raw_to_app_U0_to_app_V_din;
wire    raw_to_app_U0_to_app_V_write;
wire    ap_sync_continue;
reg    app_to_raw_U0_ap_start;
wire    app_to_raw_U0_ap_done;
wire    app_to_raw_U0_ap_continue;
wire    app_to_raw_U0_ap_idle;
wire    app_to_raw_U0_ap_ready;
wire    app_to_raw_U0_from_app_V_read;
wire   [72:0] app_to_raw_U0_to_raw_V_din;
wire    app_to_raw_U0_to_raw_V_write;
wire    raw_to_app_U0_start_full_n;
wire    raw_to_app_U0_start_write;
wire    app_to_raw_U0_start_full_n;
wire    app_to_raw_U0_start_write;

// power-on initialization
initial begin
#0 raw_to_app_U0_ap_start = 1'b0;
#0 app_to_raw_U0_ap_start = 1'b0;
end

raw_to_app raw_to_app_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(raw_to_app_U0_ap_start),
    .ap_done(raw_to_app_U0_ap_done),
    .ap_continue(raw_to_app_U0_ap_continue),
    .ap_idle(raw_to_app_U0_ap_idle),
    .ap_ready(raw_to_app_U0_ap_ready),
    .from_raw_V_dout(from_raw_V_dout),
    .from_raw_V_empty_n(from_raw_V_empty_n),
    .from_raw_V_read(raw_to_app_U0_from_raw_V_read),
    .to_app_V_din(raw_to_app_U0_to_app_V_din),
    .to_app_V_full_n(to_app_V_full_n),
    .to_app_V_write(raw_to_app_U0_to_app_V_write)
);

app_to_raw app_to_raw_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(app_to_raw_U0_ap_start),
    .ap_done(app_to_raw_U0_ap_done),
    .ap_continue(app_to_raw_U0_ap_continue),
    .ap_idle(app_to_raw_U0_ap_idle),
    .ap_ready(app_to_raw_U0_ap_ready),
    .from_app_V_dout(from_app_V_dout),
    .from_app_V_empty_n(from_app_V_empty_n),
    .from_app_V_read(app_to_raw_U0_from_app_V_read),
    .to_raw_V_din(app_to_raw_U0_to_raw_V_din),
    .to_raw_V_full_n(to_raw_V_full_n),
    .to_raw_V_write(app_to_raw_U0_to_raw_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        app_to_raw_U0_ap_start <= 1'b0;
    end else begin
        app_to_raw_U0_ap_start <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        raw_to_app_U0_ap_start <= 1'b0;
    end else begin
        raw_to_app_U0_ap_start <= 1'b1;
    end
end

assign ap_sync_continue = 1'b0;

assign app_to_raw_U0_ap_continue = 1'b1;

assign app_to_raw_U0_start_full_n = 1'b1;

assign app_to_raw_U0_start_write = 1'b0;

assign from_app_V_read = app_to_raw_U0_from_app_V_read;

assign from_raw_V_read = raw_to_app_U0_from_raw_V_read;

assign raw_to_app_U0_ap_continue = 1'b1;

assign raw_to_app_U0_start_full_n = 1'b1;

assign raw_to_app_U0_start_write = 1'b0;

assign to_app_V_din = raw_to_app_U0_to_app_V_din;

assign to_app_V_write = raw_to_app_U0_to_app_V_write;

assign to_raw_V_din = app_to_raw_U0_to_raw_V_din;

assign to_raw_V_write = app_to_raw_U0_to_raw_V_write;

endmodule //raw_bridge
