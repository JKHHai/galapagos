// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _raw_to_app_HH_
#define _raw_to_app_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct raw_to_app : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<73> > from_raw_V_dout;
    sc_in< sc_logic > from_raw_V_empty_n;
    sc_out< sc_logic > from_raw_V_read;
    sc_out< sc_lv<89> > to_app_V_din;
    sc_in< sc_logic > to_app_V_full_n;
    sc_out< sc_logic > to_app_V_write;


    // Module declarations
    raw_to_app(sc_module_name name);
    SC_HAS_PROCESS(raw_to_app);

    ~raw_to_app();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_58_p3;
    sc_signal< bool > ap_predicate_op6_read_state1;
    sc_signal< bool > ap_predicate_op12_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<3> > state_V_1_load_reg_149;
    sc_signal< sc_lv<1> > tmp_1_reg_153;
    sc_signal< bool > ap_predicate_op24_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > state_V_1;
    sc_signal< sc_lv<8> > dest_V;
    sc_signal< sc_logic > from_raw_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > to_app_V_blk_n;
    sc_signal< sc_lv<64> > tmp_data_V_fu_83_p1;
    sc_signal< sc_lv<64> > tmp_data_V_reg_157;
    sc_signal< sc_lv<1> > tmp_last_V_fu_87_p3;
    sc_signal< sc_lv<1> > tmp_last_V_reg_162;
    sc_signal< sc_lv<8> > tmp_keep_V_reg_167;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_129;
    sc_signal< bool > ap_condition_82;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_41;
    static const sc_lv<32> ap_const_lv32_48;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_129();
    void thread_ap_condition_82();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op12_read_state1();
    void thread_ap_predicate_op24_write_state2();
    void thread_ap_predicate_op6_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_from_raw_V_blk_n();
    void thread_from_raw_V_read();
    void thread_grp_nbreadreq_fu_58_p3();
    void thread_tmp_data_V_fu_83_p1();
    void thread_tmp_last_V_fu_87_p3();
    void thread_to_app_V_blk_n();
    void thread_to_app_V_din();
    void thread_to_app_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
