// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "raw_bridge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<89> raw_bridge::ap_const_lv89_0 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic raw_bridge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<73> raw_bridge::ap_const_lv73_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic raw_bridge::ap_const_logic_1 = sc_dt::Log_1;

raw_bridge::raw_bridge(sc_module_name name) : sc_module(name), mVcdFile(0) {
    raw_to_app_U0 = new raw_to_app("raw_to_app_U0");
    raw_to_app_U0->ap_clk(ap_clk);
    raw_to_app_U0->ap_rst(ap_rst);
    raw_to_app_U0->ap_start(raw_to_app_U0_ap_start);
    raw_to_app_U0->ap_done(raw_to_app_U0_ap_done);
    raw_to_app_U0->ap_continue(raw_to_app_U0_ap_continue);
    raw_to_app_U0->ap_idle(raw_to_app_U0_ap_idle);
    raw_to_app_U0->ap_ready(raw_to_app_U0_ap_ready);
    raw_to_app_U0->from_raw_V_dout(from_raw_V_dout);
    raw_to_app_U0->from_raw_V_empty_n(from_raw_V_empty_n);
    raw_to_app_U0->from_raw_V_read(raw_to_app_U0_from_raw_V_read);
    raw_to_app_U0->to_app_V_din(raw_to_app_U0_to_app_V_din);
    raw_to_app_U0->to_app_V_full_n(to_app_V_full_n);
    raw_to_app_U0->to_app_V_write(raw_to_app_U0_to_app_V_write);
    app_to_raw_U0 = new app_to_raw("app_to_raw_U0");
    app_to_raw_U0->ap_clk(ap_clk);
    app_to_raw_U0->ap_rst(ap_rst);
    app_to_raw_U0->ap_start(app_to_raw_U0_ap_start);
    app_to_raw_U0->ap_done(app_to_raw_U0_ap_done);
    app_to_raw_U0->ap_continue(app_to_raw_U0_ap_continue);
    app_to_raw_U0->ap_idle(app_to_raw_U0_ap_idle);
    app_to_raw_U0->ap_ready(app_to_raw_U0_ap_ready);
    app_to_raw_U0->from_app_V_dout(from_app_V_dout);
    app_to_raw_U0->from_app_V_empty_n(from_app_V_empty_n);
    app_to_raw_U0->from_app_V_read(app_to_raw_U0_from_app_V_read);
    app_to_raw_U0->to_raw_V_din(app_to_raw_U0_to_raw_V_din);
    app_to_raw_U0->to_raw_V_full_n(to_raw_V_full_n);
    app_to_raw_U0->to_raw_V_write(app_to_raw_U0_to_raw_V_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_app_to_raw_U0_ap_continue);

    SC_METHOD(thread_app_to_raw_U0_start_full_n);

    SC_METHOD(thread_app_to_raw_U0_start_write);

    SC_METHOD(thread_from_app_V_read);
    sensitive << ( app_to_raw_U0_from_app_V_read );

    SC_METHOD(thread_from_raw_V_read);
    sensitive << ( raw_to_app_U0_from_raw_V_read );

    SC_METHOD(thread_raw_to_app_U0_ap_continue);

    SC_METHOD(thread_raw_to_app_U0_start_full_n);

    SC_METHOD(thread_raw_to_app_U0_start_write);

    SC_METHOD(thread_to_app_V_din);
    sensitive << ( raw_to_app_U0_to_app_V_din );

    SC_METHOD(thread_to_app_V_write);
    sensitive << ( raw_to_app_U0_to_app_V_write );

    SC_METHOD(thread_to_raw_V_din);
    sensitive << ( app_to_raw_U0_to_raw_V_din );

    SC_METHOD(thread_to_raw_V_write);
    sensitive << ( app_to_raw_U0_to_raw_V_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    raw_to_app_U0_ap_start = SC_LOGIC_0;
    app_to_raw_U0_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "raw_bridge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, to_app_V_din, "(port)to_app_V_din");
    sc_trace(mVcdFile, to_app_V_full_n, "(port)to_app_V_full_n");
    sc_trace(mVcdFile, to_app_V_write, "(port)to_app_V_write");
    sc_trace(mVcdFile, from_raw_V_dout, "(port)from_raw_V_dout");
    sc_trace(mVcdFile, from_raw_V_empty_n, "(port)from_raw_V_empty_n");
    sc_trace(mVcdFile, from_raw_V_read, "(port)from_raw_V_read");
    sc_trace(mVcdFile, from_app_V_dout, "(port)from_app_V_dout");
    sc_trace(mVcdFile, from_app_V_empty_n, "(port)from_app_V_empty_n");
    sc_trace(mVcdFile, from_app_V_read, "(port)from_app_V_read");
    sc_trace(mVcdFile, to_raw_V_din, "(port)to_raw_V_din");
    sc_trace(mVcdFile, to_raw_V_full_n, "(port)to_raw_V_full_n");
    sc_trace(mVcdFile, to_raw_V_write, "(port)to_raw_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, raw_to_app_U0_ap_start, "raw_to_app_U0_ap_start");
    sc_trace(mVcdFile, raw_to_app_U0_ap_done, "raw_to_app_U0_ap_done");
    sc_trace(mVcdFile, raw_to_app_U0_ap_continue, "raw_to_app_U0_ap_continue");
    sc_trace(mVcdFile, raw_to_app_U0_ap_idle, "raw_to_app_U0_ap_idle");
    sc_trace(mVcdFile, raw_to_app_U0_ap_ready, "raw_to_app_U0_ap_ready");
    sc_trace(mVcdFile, raw_to_app_U0_from_raw_V_read, "raw_to_app_U0_from_raw_V_read");
    sc_trace(mVcdFile, raw_to_app_U0_to_app_V_din, "raw_to_app_U0_to_app_V_din");
    sc_trace(mVcdFile, raw_to_app_U0_to_app_V_write, "raw_to_app_U0_to_app_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, app_to_raw_U0_ap_start, "app_to_raw_U0_ap_start");
    sc_trace(mVcdFile, app_to_raw_U0_ap_done, "app_to_raw_U0_ap_done");
    sc_trace(mVcdFile, app_to_raw_U0_ap_continue, "app_to_raw_U0_ap_continue");
    sc_trace(mVcdFile, app_to_raw_U0_ap_idle, "app_to_raw_U0_ap_idle");
    sc_trace(mVcdFile, app_to_raw_U0_ap_ready, "app_to_raw_U0_ap_ready");
    sc_trace(mVcdFile, app_to_raw_U0_from_app_V_read, "app_to_raw_U0_from_app_V_read");
    sc_trace(mVcdFile, app_to_raw_U0_to_raw_V_din, "app_to_raw_U0_to_raw_V_din");
    sc_trace(mVcdFile, app_to_raw_U0_to_raw_V_write, "app_to_raw_U0_to_raw_V_write");
    sc_trace(mVcdFile, raw_to_app_U0_start_full_n, "raw_to_app_U0_start_full_n");
    sc_trace(mVcdFile, raw_to_app_U0_start_write, "raw_to_app_U0_start_write");
    sc_trace(mVcdFile, app_to_raw_U0_start_full_n, "app_to_raw_U0_start_full_n");
    sc_trace(mVcdFile, app_to_raw_U0_start_write, "app_to_raw_U0_start_write");
#endif

    }
    mHdltvinHandle.open("raw_bridge.hdltvin.dat");
    mHdltvoutHandle.open("raw_bridge.hdltvout.dat");
}

raw_bridge::~raw_bridge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete raw_to_app_U0;
    delete app_to_raw_U0;
}

void raw_bridge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        app_to_raw_U0_ap_start = ap_const_logic_0;
    } else {
        app_to_raw_U0_ap_start = ap_const_logic_1;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        raw_to_app_U0_ap_start = ap_const_logic_0;
    } else {
        raw_to_app_U0_ap_start = ap_const_logic_1;
    }
}

void raw_bridge::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void raw_bridge::thread_app_to_raw_U0_ap_continue() {
    app_to_raw_U0_ap_continue = ap_const_logic_1;
}

void raw_bridge::thread_app_to_raw_U0_start_full_n() {
    app_to_raw_U0_start_full_n = ap_const_logic_1;
}

void raw_bridge::thread_app_to_raw_U0_start_write() {
    app_to_raw_U0_start_write = ap_const_logic_0;
}

void raw_bridge::thread_from_app_V_read() {
    from_app_V_read = app_to_raw_U0_from_app_V_read.read();
}

void raw_bridge::thread_from_raw_V_read() {
    from_raw_V_read = raw_to_app_U0_from_raw_V_read.read();
}

void raw_bridge::thread_raw_to_app_U0_ap_continue() {
    raw_to_app_U0_ap_continue = ap_const_logic_1;
}

void raw_bridge::thread_raw_to_app_U0_start_full_n() {
    raw_to_app_U0_start_full_n = ap_const_logic_1;
}

void raw_bridge::thread_raw_to_app_U0_start_write() {
    raw_to_app_U0_start_write = ap_const_logic_0;
}

void raw_bridge::thread_to_app_V_din() {
    to_app_V_din = raw_to_app_U0_to_app_V_din.read();
}

void raw_bridge::thread_to_app_V_write() {
    to_app_V_write = raw_to_app_U0_to_app_V_write.read();
}

void raw_bridge::thread_to_raw_V_din() {
    to_raw_V_din = app_to_raw_U0_to_raw_V_din.read();
}

void raw_bridge::thread_to_raw_V_write() {
    to_raw_V_write = app_to_raw_U0_to_raw_V_write.read();
}

void raw_bridge::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"to_app_V_din\" :  \"" << to_app_V_din.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"to_app_V_full_n\" :  \"" << to_app_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_app_V_write\" :  \"" << to_app_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_raw_V_dout\" :  \"" << from_raw_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_raw_V_empty_n\" :  \"" << from_raw_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"from_raw_V_read\" :  \"" << from_raw_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_app_V_dout\" :  \"" << from_app_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_app_V_empty_n\" :  \"" << from_app_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"from_app_V_read\" :  \"" << from_app_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_raw_V_din\" :  \"" << to_raw_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"to_raw_V_full_n\" :  \"" << to_raw_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_raw_V_write\" :  \"" << to_raw_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

