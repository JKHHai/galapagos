// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "app_to_raw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic app_to_raw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic app_to_raw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> app_to_raw::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> app_to_raw::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool app_to_raw::ap_const_boolean_1 = true;
const sc_lv<3> app_to_raw::ap_const_lv3_4 = "100";
const sc_lv<1> app_to_raw::ap_const_lv1_1 = "1";
const sc_lv<3> app_to_raw::ap_const_lv3_2 = "10";
const sc_lv<3> app_to_raw::ap_const_lv3_3 = "11";
const bool app_to_raw::ap_const_boolean_0 = false;
const sc_lv<32> app_to_raw::ap_const_lv32_48 = "1001000";
const sc_lv<32> app_to_raw::ap_const_lv32_51 = "1010001";
const sc_lv<32> app_to_raw::ap_const_lv32_58 = "1011000";
const sc_lv<32> app_to_raw::ap_const_lv32_40 = "1000000";
const sc_lv<32> app_to_raw::ap_const_lv32_47 = "1000111";
const sc_lv<17> app_to_raw::ap_const_lv17_1FE00 = "11111111000000000";
const sc_lv<48> app_to_raw::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";

app_to_raw::app_to_raw(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );
    sensitive << ( to_raw_V_full_n );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );
    sensitive << ( to_raw_V_full_n );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );
    sensitive << ( to_raw_V_full_n );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( to_raw_V_full_n );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );

    SC_METHOD(thread_ap_condition_154);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_94);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op19_read_state1);
    sensitive << ( grp_nbreadreq_fu_68_p3 );
    sensitive << ( state_V );

    SC_METHOD(thread_ap_predicate_op35_write_state2);
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( tmp_3_reg_236 );

    SC_METHOD(thread_ap_predicate_op45_write_state2);
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( tmp_reg_255 );

    SC_METHOD(thread_ap_predicate_op7_read_state1);
    sensitive << ( grp_nbreadreq_fu_68_p3 );
    sensitive << ( state_V );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_from_app_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_from_app_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op19_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_89_p3);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_grp_nbreadreq_fu_68_p3);
    sensitive << ( from_app_V_empty_n );

    SC_METHOD(thread_state_V_load_load_fu_119_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( state_V );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_storemerge1_fu_151_p3);
    sensitive << ( app_packet_in_last_V );

    SC_METHOD(thread_storemerge_fu_137_p3);
    sensitive << ( grp_fu_89_p3 );

    SC_METHOD(thread_tmp_1_fu_217_p4);
    sensitive << ( tmp_dest_V_load_new_reg_259 );

    SC_METHOD(thread_tmp_2_fu_207_p4);
    sensitive << ( app_packet_in_data_V );
    sensitive << ( app_packet_in_keep_V );
    sensitive << ( tmp_last_V_reg_231 );

    SC_METHOD(thread_tmp_413_fu_191_p4);
    sensitive << ( tmp_data_V_1_reg_240 );
    sensitive << ( tmp_last_V_1_reg_245 );
    sensitive << ( tmp_tkeep_V_1_reg_250 );

    SC_METHOD(thread_tmp_5_fu_165_p1);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_tmp_data_V_1_fu_127_p1);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_to_raw_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( to_raw_V_full_n );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_to_raw_V_din);
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );
    sensitive << ( tmp_413_fu_191_p4 );
    sensitive << ( tmp_2_fu_207_p4 );
    sensitive << ( tmp_1_fu_217_p4 );
    sensitive << ( ap_condition_154 );

    SC_METHOD(thread_to_raw_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( state_V_load_reg_227 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op45_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    state_V = "010";
    app_packet_in_last_V = "0";
    app_packet_in_data_V = "0000000000000000000000000000000000000000000000000000000000000000";
    app_packet_in_keep_V = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "app_to_raw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, from_app_V_dout, "(port)from_app_V_dout");
    sc_trace(mVcdFile, from_app_V_empty_n, "(port)from_app_V_empty_n");
    sc_trace(mVcdFile, from_app_V_read, "(port)from_app_V_read");
    sc_trace(mVcdFile, to_raw_V_din, "(port)to_raw_V_din");
    sc_trace(mVcdFile, to_raw_V_full_n, "(port)to_raw_V_full_n");
    sc_trace(mVcdFile, to_raw_V_write, "(port)to_raw_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, state_V_load_load_fu_119_p1, "state_V_load_load_fu_119_p1");
    sc_trace(mVcdFile, grp_nbreadreq_fu_68_p3, "grp_nbreadreq_fu_68_p3");
    sc_trace(mVcdFile, ap_predicate_op7_read_state1, "ap_predicate_op7_read_state1");
    sc_trace(mVcdFile, ap_predicate_op19_read_state1, "ap_predicate_op19_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, state_V_load_reg_227, "state_V_load_reg_227");
    sc_trace(mVcdFile, tmp_3_reg_236, "tmp_3_reg_236");
    sc_trace(mVcdFile, ap_predicate_op35_write_state2, "ap_predicate_op35_write_state2");
    sc_trace(mVcdFile, tmp_reg_255, "tmp_reg_255");
    sc_trace(mVcdFile, ap_predicate_op45_write_state2, "ap_predicate_op45_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, state_V, "state_V");
    sc_trace(mVcdFile, app_packet_in_last_V, "app_packet_in_last_V");
    sc_trace(mVcdFile, app_packet_in_data_V, "app_packet_in_data_V");
    sc_trace(mVcdFile, app_packet_in_keep_V, "app_packet_in_keep_V");
    sc_trace(mVcdFile, from_app_V_blk_n, "from_app_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, to_raw_V_blk_n, "to_raw_V_blk_n");
    sc_trace(mVcdFile, tmp_last_V_reg_231, "tmp_last_V_reg_231");
    sc_trace(mVcdFile, tmp_data_V_1_fu_127_p1, "tmp_data_V_1_fu_127_p1");
    sc_trace(mVcdFile, tmp_data_V_1_reg_240, "tmp_data_V_1_reg_240");
    sc_trace(mVcdFile, grp_fu_89_p3, "grp_fu_89_p3");
    sc_trace(mVcdFile, tmp_last_V_1_reg_245, "tmp_last_V_1_reg_245");
    sc_trace(mVcdFile, tmp_tkeep_V_1_reg_250, "tmp_tkeep_V_1_reg_250");
    sc_trace(mVcdFile, tmp_dest_V_load_new_reg_259, "tmp_dest_V_load_new_reg_259");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_413_fu_191_p4, "tmp_413_fu_191_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_2_fu_207_p4, "tmp_2_fu_207_p4");
    sc_trace(mVcdFile, tmp_1_fu_217_p4, "tmp_1_fu_217_p4");
    sc_trace(mVcdFile, storemerge_fu_137_p3, "storemerge_fu_137_p3");
    sc_trace(mVcdFile, storemerge1_fu_151_p3, "storemerge1_fu_151_p3");
    sc_trace(mVcdFile, tmp_5_fu_165_p1, "tmp_5_fu_165_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_94, "ap_condition_94");
    sc_trace(mVcdFile, ap_condition_154, "ap_condition_154");
#endif

    }
}

app_to_raw::~app_to_raw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void app_to_raw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_94.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) {
            app_packet_in_data_V = tmp_5_fu_165_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) {
            app_packet_in_data_V = tmp_data_V_1_fu_127_p1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_94.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) {
            state_V = ap_const_lv3_3;
        } else if (esl_seteq<1,3,3>(state_V_load_load_fu_119_p1.read(), ap_const_lv3_3)) {
            state_V = storemerge1_fu_151_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) {
            state_V = storemerge_fu_137_p3.read();
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        app_packet_in_keep_V = from_app_V_dout.read().range(88, 81);
        app_packet_in_last_V = from_app_V_dout.read().range(72, 72);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        state_V_load_reg_227 = state_V.read();
        tmp_last_V_reg_231 = app_packet_in_last_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_4) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_3_reg_236 =  (sc_lv<1>) (from_app_V_empty_n.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_1_reg_240 = tmp_data_V_1_fu_127_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_dest_V_load_new_reg_259 = from_app_V_dout.read().range(71, 64);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_1_reg_245 = from_app_V_dout.read().range(72, 72);
        tmp_tkeep_V_1_reg_250 = from_app_V_dout.read().range(88, 81);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_2) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_255 =  (sc_lv<1>) (from_app_V_empty_n.read());
    }
}

void app_to_raw::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void app_to_raw::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void app_to_raw::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_raw::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_raw::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_raw::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void app_to_raw::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
  esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, to_raw_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read())));
}

void app_to_raw::thread_ap_condition_154() {
    ap_condition_154 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void app_to_raw::thread_ap_condition_94() {
    ap_condition_94 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void app_to_raw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void app_to_raw::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void app_to_raw::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void app_to_raw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void app_to_raw::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void app_to_raw::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void app_to_raw::thread_ap_predicate_op19_read_state1() {
    ap_predicate_op19_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_68_p3.read(), ap_const_lv1_1) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_2));
}

void app_to_raw::thread_ap_predicate_op35_write_state2() {
    ap_predicate_op35_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_4, state_V_load_reg_227.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_236.read()));
}

void app_to_raw::thread_ap_predicate_op45_write_state2() {
    ap_predicate_op45_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_2, state_V_load_reg_227.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_255.read()));
}

void app_to_raw::thread_ap_predicate_op7_read_state1() {
    ap_predicate_op7_read_state1 = (esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_4) && esl_seteq<1,1,1>(grp_nbreadreq_fu_68_p3.read(), ap_const_lv1_1));
}

void app_to_raw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void app_to_raw::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void app_to_raw::thread_from_app_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        from_app_V_blk_n = from_app_V_empty_n.read();
    } else {
        from_app_V_blk_n = ap_const_logic_1;
    }
}

void app_to_raw::thread_from_app_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op19_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        from_app_V_read = ap_const_logic_1;
    } else {
        from_app_V_read = ap_const_logic_0;
    }
}

void app_to_raw::thread_grp_fu_89_p3() {
    grp_fu_89_p3 = from_app_V_dout.read().range(72, 72);
}

void app_to_raw::thread_grp_nbreadreq_fu_68_p3() {
    grp_nbreadreq_fu_68_p3 =  (sc_lv<1>) (from_app_V_empty_n.read());
}

void app_to_raw::thread_state_V_load_load_fu_119_p1() {
    state_V_load_load_fu_119_p1 = state_V.read();
}

void app_to_raw::thread_storemerge1_fu_151_p3() {
    storemerge1_fu_151_p3 = (!app_packet_in_last_V.read()[0].is_01())? sc_lv<3>(): ((app_packet_in_last_V.read()[0].to_bool())? ap_const_lv3_2: ap_const_lv3_4);
}

void app_to_raw::thread_storemerge_fu_137_p3() {
    storemerge_fu_137_p3 = (!grp_fu_89_p3.read()[0].is_01())? sc_lv<3>(): ((grp_fu_89_p3.read()[0].to_bool())? ap_const_lv3_2: ap_const_lv3_4);
}

void app_to_raw::thread_tmp_1_fu_217_p4() {
    tmp_1_fu_217_p4 = esl_concat<25,48>(esl_concat<17,8>(ap_const_lv17_1FE00, tmp_dest_V_load_new_reg_259.read()), ap_const_lv48_0);
}

void app_to_raw::thread_tmp_2_fu_207_p4() {
    tmp_2_fu_207_p4 = esl_concat<9,64>(esl_concat<8,1>(app_packet_in_keep_V.read(), tmp_last_V_reg_231.read()), app_packet_in_data_V.read());
}

void app_to_raw::thread_tmp_413_fu_191_p4() {
    tmp_413_fu_191_p4 = esl_concat<9,64>(esl_concat<8,1>(tmp_tkeep_V_1_reg_250.read(), tmp_last_V_1_reg_245.read()), tmp_data_V_1_reg_240.read());
}

void app_to_raw::thread_tmp_5_fu_165_p1() {
    tmp_5_fu_165_p1 = from_app_V_dout.read().range(64-1, 0);
}

void app_to_raw::thread_tmp_data_V_1_fu_127_p1() {
    tmp_data_V_1_fu_127_p1 = from_app_V_dout.read().range(64-1, 0);
}

void app_to_raw::thread_to_raw_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        to_raw_V_blk_n = to_raw_V_full_n.read();
    } else {
        to_raw_V_blk_n = ap_const_logic_1;
    }
}

void app_to_raw::thread_to_raw_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_154.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read())) {
            to_raw_V_din = tmp_1_fu_217_p4.read();
        } else if (esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3)) {
            to_raw_V_din = tmp_2_fu_207_p4.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) {
            to_raw_V_din = tmp_413_fu_191_p4.read();
        } else {
            to_raw_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        to_raw_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void app_to_raw::thread_to_raw_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_227.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        to_raw_V_write = ap_const_logic_1;
    } else {
        to_raw_V_write = ap_const_logic_0;
    }
}

void app_to_raw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

