// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _app_to_raw_HH_
#define _app_to_raw_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct app_to_raw : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<89> > from_app_V_dout;
    sc_in< sc_logic > from_app_V_empty_n;
    sc_out< sc_logic > from_app_V_read;
    sc_out< sc_lv<73> > to_raw_V_din;
    sc_in< sc_logic > to_raw_V_full_n;
    sc_out< sc_logic > to_raw_V_write;


    // Module declarations
    app_to_raw(sc_module_name name);
    SC_HAS_PROCESS(app_to_raw);

    ~app_to_raw();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<3> > state_V_load_load_fu_119_p1;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_68_p3;
    sc_signal< bool > ap_predicate_op7_read_state1;
    sc_signal< bool > ap_predicate_op19_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<3> > state_V_load_reg_227;
    sc_signal< sc_lv<1> > tmp_3_reg_236;
    sc_signal< bool > ap_predicate_op35_write_state2;
    sc_signal< sc_lv<1> > tmp_reg_255;
    sc_signal< bool > ap_predicate_op45_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > state_V;
    sc_signal< sc_lv<1> > app_packet_in_last_V;
    sc_signal< sc_lv<64> > app_packet_in_data_V;
    sc_signal< sc_lv<8> > app_packet_in_keep_V;
    sc_signal< sc_logic > from_app_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > to_raw_V_blk_n;
    sc_signal< sc_lv<1> > tmp_last_V_reg_231;
    sc_signal< sc_lv<64> > tmp_data_V_1_fu_127_p1;
    sc_signal< sc_lv<64> > tmp_data_V_1_reg_240;
    sc_signal< sc_lv<1> > grp_fu_89_p3;
    sc_signal< sc_lv<1> > tmp_last_V_1_reg_245;
    sc_signal< sc_lv<8> > tmp_tkeep_V_1_reg_250;
    sc_signal< sc_lv<8> > tmp_dest_V_load_new_reg_259;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<73> > tmp_413_fu_191_p4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<73> > tmp_2_fu_207_p4;
    sc_signal< sc_lv<73> > tmp_1_fu_217_p4;
    sc_signal< sc_lv<3> > storemerge_fu_137_p3;
    sc_signal< sc_lv<3> > storemerge1_fu_151_p3;
    sc_signal< sc_lv<64> > tmp_5_fu_165_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_94;
    sc_signal< bool > ap_condition_154;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_48;
    static const sc_lv<32> ap_const_lv32_51;
    static const sc_lv<32> ap_const_lv32_58;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_47;
    static const sc_lv<17> ap_const_lv17_1FE00;
    static const sc_lv<48> ap_const_lv48_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_154();
    void thread_ap_condition_94();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op19_read_state1();
    void thread_ap_predicate_op35_write_state2();
    void thread_ap_predicate_op45_write_state2();
    void thread_ap_predicate_op7_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_from_app_V_blk_n();
    void thread_from_app_V_read();
    void thread_grp_fu_89_p3();
    void thread_grp_nbreadreq_fu_68_p3();
    void thread_state_V_load_load_fu_119_p1();
    void thread_storemerge1_fu_151_p3();
    void thread_storemerge_fu_137_p3();
    void thread_tmp_1_fu_217_p4();
    void thread_tmp_2_fu_207_p4();
    void thread_tmp_413_fu_191_p4();
    void thread_tmp_5_fu_165_p1();
    void thread_tmp_data_V_1_fu_127_p1();
    void thread_to_raw_V_blk_n();
    void thread_to_raw_V_din();
    void thread_to_raw_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
