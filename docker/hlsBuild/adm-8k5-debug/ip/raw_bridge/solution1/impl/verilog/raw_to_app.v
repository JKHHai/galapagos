// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module raw_to_app (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        from_raw_V_dout,
        from_raw_V_empty_n,
        from_raw_V_read,
        to_app_V_din,
        to_app_V_full_n,
        to_app_V_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [72:0] from_raw_V_dout;
input   from_raw_V_empty_n;
output   from_raw_V_read;
output  [88:0] to_app_V_din;
input   to_app_V_full_n;
output   to_app_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg from_raw_V_read;
reg to_app_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] grp_nbreadreq_fu_58_p3;
reg    ap_predicate_op6_read_state1;
reg    ap_predicate_op12_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [2:0] state_V_1_load_reg_149;
reg   [0:0] tmp_1_reg_153;
reg    ap_predicate_op24_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] state_V_1;
reg   [7:0] dest_V;
reg    from_raw_V_blk_n;
wire    ap_block_pp0_stage0;
reg    to_app_V_blk_n;
wire   [63:0] tmp_data_V_fu_83_p1;
reg   [63:0] tmp_data_V_reg_157;
wire   [0:0] tmp_last_V_fu_87_p3;
reg   [0:0] tmp_last_V_reg_162;
reg   [7:0] tmp_keep_V_reg_167;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_129;
reg    ap_condition_82;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 state_V_1 = 3'd2;
#0 dest_V = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        if ((ap_predicate_op12_read_state1 == 1'b1)) begin
                        state_V_1[0] <= 1'b1;
        end else if ((1'b1 == ap_condition_129)) begin
                        state_V_1[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1))) begin
        dest_V <= {{from_raw_V_dout[55:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_V_1_load_reg_149[0] <= state_V_1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V_1 == 3'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_153 <= from_raw_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op6_read_state1 == 1'b1))) begin
        tmp_data_V_reg_157 <= tmp_data_V_fu_83_p1;
        tmp_keep_V_reg_167 <= {{from_raw_V_dout[72:65]}};
        tmp_last_V_reg_162 <= from_raw_V_dout[32'd64];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op6_read_state1 == 1'b1)))) begin
        from_raw_V_blk_n = from_raw_V_empty_n;
    end else begin
        from_raw_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op6_read_state1 == 1'b1)))) begin
        from_raw_V_read = 1'b1;
    end else begin
        from_raw_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1))) begin
        to_app_V_blk_n = to_app_V_full_n;
    end else begin
        to_app_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1))) begin
        to_app_V_write = 1'b1;
    end else begin
        to_app_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op24_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op24_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((to_app_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op24_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((from_raw_V_empty_n == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((to_app_V_full_n == 1'b0) & (ap_predicate_op24_write_state2 == 1'b1));
end

always @ (*) begin
    ap_condition_129 = ((tmp_last_V_fu_87_p3 == 1'd1) & (grp_nbreadreq_fu_58_p3 == 1'd1) & (state_V_1 == 3'd3));
end

always @ (*) begin
    ap_condition_82 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op12_read_state1 = ((grp_nbreadreq_fu_58_p3 == 1'd1) & (state_V_1 == 3'd2));
end

always @ (*) begin
    ap_predicate_op24_write_state2 = ((tmp_1_reg_153 == 1'd1) & (state_V_1_load_reg_149 == 3'd3));
end

always @ (*) begin
    ap_predicate_op6_read_state1 = ((grp_nbreadreq_fu_58_p3 == 1'd1) & (state_V_1 == 3'd3));
end

assign grp_nbreadreq_fu_58_p3 = from_raw_V_empty_n;

assign tmp_data_V_fu_83_p1 = from_raw_V_dout[63:0];

assign tmp_last_V_fu_87_p3 = from_raw_V_dout[32'd64];

assign to_app_V_din = {{{{{tmp_keep_V_reg_167}, {8'd0}}, {tmp_last_V_reg_162}}, {dest_V}}, {tmp_data_V_reg_157}};

always @ (posedge ap_clk) begin
    state_V_1_load_reg_149[2:1] <= 2'b01;
    state_V_1[2:1] <= 2'b01;
end

endmodule //raw_to_app
