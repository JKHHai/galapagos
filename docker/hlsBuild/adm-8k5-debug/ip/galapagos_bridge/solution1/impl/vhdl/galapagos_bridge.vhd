-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity galapagos_bridge is
port (
    g2N_input_V_dout : IN STD_LOGIC_VECTOR (88 downto 0);
    g2N_input_V_empty_n : IN STD_LOGIC;
    g2N_input_V_read : OUT STD_LOGIC;
    g2N_output_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
    g2N_output_V_full_n : IN STD_LOGIC;
    g2N_output_V_write : OUT STD_LOGIC;
    buffer_storage_A_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer_storage_A_V_ce0 : OUT STD_LOGIC;
    buffer_storage_A_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    buffer_storage_A_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buffer_storage_A_V_we0 : OUT STD_LOGIC;
    buffer_storage_B_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer_storage_B_V_ce0 : OUT STD_LOGIC;
    buffer_storage_B_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    buffer_storage_B_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buffer_storage_B_V_we0 : OUT STD_LOGIC;
    n2G_input_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
    n2G_input_V_empty_n : IN STD_LOGIC;
    n2G_input_V_read : OUT STD_LOGIC;
    n2G_output_V_din : OUT STD_LOGIC_VECTOR (88 downto 0);
    n2G_output_V_full_n : IN STD_LOGIC;
    n2G_output_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of galapagos_bridge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "galapagos_bridge,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.559000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=296,HLS_SYN_LUT=466}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv73_0 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv89_0 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal g2N_ingress_U0_ap_start : STD_LOGIC := '0';
    signal g2N_ingress_U0_ap_done : STD_LOGIC;
    signal g2N_ingress_U0_ap_continue : STD_LOGIC;
    signal g2N_ingress_U0_ap_idle : STD_LOGIC;
    signal g2N_ingress_U0_ap_ready : STD_LOGIC;
    signal g2N_ingress_U0_input_V_read : STD_LOGIC;
    signal g2N_ingress_U0_buffer_storage_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal g2N_ingress_U0_buffer_storage_V_ce0 : STD_LOGIC;
    signal g2N_ingress_U0_buffer_storage_V_we0 : STD_LOGIC;
    signal g2N_ingress_U0_buffer_storage_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal g2N_ingress_U0_length_stream_V_V : STD_LOGIC_VECTOR (15 downto 0);
    signal g2N_ingress_U0_length_stream_V_V_ap_vld : STD_LOGIC;
    signal g2N_ingress_U0_dest_stream_V_V : STD_LOGIC_VECTOR (7 downto 0);
    signal g2N_ingress_U0_dest_stream_V_V_ap_vld : STD_LOGIC;
    signal g2N_ingress_U0_src_stream_V_V : STD_LOGIC_VECTOR (7 downto 0);
    signal g2N_ingress_U0_src_stream_V_V_ap_vld : STD_LOGIC;
    signal ap_channel_done_src_stream_V_V : STD_LOGIC;
    signal src_stream_V_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_src_stream_V_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_src_stream_V_V : STD_LOGIC;
    signal ap_channel_done_dest_stream_V_V : STD_LOGIC;
    signal dest_stream_V_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_dest_stream_V_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_dest_stream_V_V : STD_LOGIC;
    signal ap_channel_done_length_stream_V_V : STD_LOGIC;
    signal length_stream_V_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_length_stream_V_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_length_stream_V_V : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal g2N_egress_U0_ap_start : STD_LOGIC;
    signal g2N_egress_U0_ap_done : STD_LOGIC;
    signal g2N_egress_U0_ap_continue : STD_LOGIC;
    signal g2N_egress_U0_ap_idle : STD_LOGIC;
    signal g2N_egress_U0_ap_ready : STD_LOGIC;
    signal g2N_egress_U0_output_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal g2N_egress_U0_output_V_write : STD_LOGIC;
    signal g2N_egress_U0_buffer_storage_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal g2N_egress_U0_buffer_storage_V_ce0 : STD_LOGIC;
    signal n2G_U0_ap_start : STD_LOGIC := '0';
    signal n2G_U0_ap_done : STD_LOGIC;
    signal n2G_U0_ap_continue : STD_LOGIC;
    signal n2G_U0_ap_idle : STD_LOGIC;
    signal n2G_U0_ap_ready : STD_LOGIC;
    signal n2G_U0_input_V_read : STD_LOGIC;
    signal n2G_U0_output_V_din : STD_LOGIC_VECTOR (88 downto 0);
    signal n2G_U0_output_V_write : STD_LOGIC;
    signal length_stream_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal length_stream_V_V_empty_n : STD_LOGIC;
    signal dest_stream_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dest_stream_V_V_empty_n : STD_LOGIC;
    signal src_stream_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_stream_V_V_empty_n : STD_LOGIC;
    signal g2N_ingress_U0_start_full_n : STD_LOGIC;
    signal g2N_ingress_U0_start_write : STD_LOGIC;
    signal g2N_egress_U0_start_full_n : STD_LOGIC;
    signal g2N_egress_U0_start_write : STD_LOGIC;
    signal n2G_U0_start_full_n : STD_LOGIC;
    signal n2G_U0_start_write : STD_LOGIC;

    component g2N_ingress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_dout : IN STD_LOGIC_VECTOR (88 downto 0);
        input_V_empty_n : IN STD_LOGIC;
        input_V_read : OUT STD_LOGIC;
        buffer_storage_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        buffer_storage_V_ce0 : OUT STD_LOGIC;
        buffer_storage_V_we0 : OUT STD_LOGIC;
        buffer_storage_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_stream_V_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        length_stream_V_V_ap_vld : OUT STD_LOGIC;
        dest_stream_V_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        dest_stream_V_V_ap_vld : OUT STD_LOGIC;
        src_stream_V_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_stream_V_V_ap_vld : OUT STD_LOGIC );
    end component;


    component g2N_egress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        output_V_full_n : IN STD_LOGIC;
        output_V_write : OUT STD_LOGIC;
        buffer_storage_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        buffer_storage_V_ce0 : OUT STD_LOGIC;
        buffer_storage_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        length_stream_V_V : IN STD_LOGIC_VECTOR (15 downto 0);
        dest_stream_V_V : IN STD_LOGIC_VECTOR (7 downto 0);
        src_stream_V_V : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component n2G IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        input_V_empty_n : IN STD_LOGIC;
        input_V_read : OUT STD_LOGIC;
        output_V_din : OUT STD_LOGIC_VECTOR (88 downto 0);
        output_V_full_n : IN STD_LOGIC;
        output_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    g2N_ingress_U0 : component g2N_ingress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => g2N_ingress_U0_ap_start,
        ap_done => g2N_ingress_U0_ap_done,
        ap_continue => g2N_ingress_U0_ap_continue,
        ap_idle => g2N_ingress_U0_ap_idle,
        ap_ready => g2N_ingress_U0_ap_ready,
        input_V_dout => g2N_input_V_dout,
        input_V_empty_n => g2N_input_V_empty_n,
        input_V_read => g2N_ingress_U0_input_V_read,
        buffer_storage_V_address0 => g2N_ingress_U0_buffer_storage_V_address0,
        buffer_storage_V_ce0 => g2N_ingress_U0_buffer_storage_V_ce0,
        buffer_storage_V_we0 => g2N_ingress_U0_buffer_storage_V_we0,
        buffer_storage_V_d0 => g2N_ingress_U0_buffer_storage_V_d0,
        length_stream_V_V => g2N_ingress_U0_length_stream_V_V,
        length_stream_V_V_ap_vld => g2N_ingress_U0_length_stream_V_V_ap_vld,
        dest_stream_V_V => g2N_ingress_U0_dest_stream_V_V,
        dest_stream_V_V_ap_vld => g2N_ingress_U0_dest_stream_V_V_ap_vld,
        src_stream_V_V => g2N_ingress_U0_src_stream_V_V,
        src_stream_V_V_ap_vld => g2N_ingress_U0_src_stream_V_V_ap_vld);

    g2N_egress_U0 : component g2N_egress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => g2N_egress_U0_ap_start,
        ap_done => g2N_egress_U0_ap_done,
        ap_continue => g2N_egress_U0_ap_continue,
        ap_idle => g2N_egress_U0_ap_idle,
        ap_ready => g2N_egress_U0_ap_ready,
        output_V_din => g2N_egress_U0_output_V_din,
        output_V_full_n => g2N_output_V_full_n,
        output_V_write => g2N_egress_U0_output_V_write,
        buffer_storage_V_address0 => g2N_egress_U0_buffer_storage_V_address0,
        buffer_storage_V_ce0 => g2N_egress_U0_buffer_storage_V_ce0,
        buffer_storage_V_q0 => buffer_storage_B_V_q0,
        length_stream_V_V => length_stream_V_V_dout,
        dest_stream_V_V => dest_stream_V_V_dout,
        src_stream_V_V => src_stream_V_V_dout);

    n2G_U0 : component n2G
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => n2G_U0_ap_start,
        ap_done => n2G_U0_ap_done,
        ap_continue => n2G_U0_ap_continue,
        ap_idle => n2G_U0_ap_idle,
        ap_ready => n2G_U0_ap_ready,
        input_V_dout => n2G_input_V_dout,
        input_V_empty_n => n2G_input_V_empty_n,
        input_V_read => n2G_U0_input_V_read,
        output_V_din => n2G_U0_output_V_din,
        output_V_full_n => n2G_output_V_full_n,
        output_V_write => n2G_U0_output_V_write);

    length_stream_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => g2N_ingress_U0_length_stream_V_V,
        if_full_n => length_stream_V_V_full_n,
        if_write => ap_channel_done_length_stream_V_V,
        if_dout => length_stream_V_V_dout,
        if_empty_n => length_stream_V_V_empty_n,
        if_read => g2N_egress_U0_ap_ready);

    dest_stream_V_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => g2N_ingress_U0_dest_stream_V_V,
        if_full_n => dest_stream_V_V_full_n,
        if_write => ap_channel_done_dest_stream_V_V,
        if_dout => dest_stream_V_V_dout,
        if_empty_n => dest_stream_V_V_empty_n,
        if_read => g2N_egress_U0_ap_ready);

    src_stream_V_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => g2N_ingress_U0_src_stream_V_V,
        if_full_n => src_stream_V_V_full_n,
        if_write => ap_channel_done_src_stream_V_V,
        if_dout => src_stream_V_V_dout,
        if_empty_n => src_stream_V_V_empty_n,
        if_read => g2N_egress_U0_ap_ready);





    ap_sync_reg_channel_write_dest_stream_V_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_dest_stream_V_V <= ap_const_logic_0;
            else
                if (((g2N_ingress_U0_ap_done and g2N_ingress_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_dest_stream_V_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_dest_stream_V_V <= ap_sync_channel_write_dest_stream_V_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_length_stream_V_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_length_stream_V_V <= ap_const_logic_0;
            else
                if (((g2N_ingress_U0_ap_done and g2N_ingress_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_length_stream_V_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_length_stream_V_V <= ap_sync_channel_write_length_stream_V_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_src_stream_V_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_src_stream_V_V <= ap_const_logic_0;
            else
                if (((g2N_ingress_U0_ap_done and g2N_ingress_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_src_stream_V_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_src_stream_V_V <= ap_sync_channel_write_src_stream_V_V;
                end if; 
            end if;
        end if;
    end process;


    g2N_ingress_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                g2N_ingress_U0_ap_start <= ap_const_logic_0;
            else
                g2N_ingress_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    n2G_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                n2G_U0_ap_start <= ap_const_logic_0;
            else
                n2G_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_channel_done_dest_stream_V_V <= (g2N_ingress_U0_ap_done and (ap_sync_reg_channel_write_dest_stream_V_V xor ap_const_logic_1));
    ap_channel_done_length_stream_V_V <= (g2N_ingress_U0_ap_done and (ap_sync_reg_channel_write_length_stream_V_V xor ap_const_logic_1));
    ap_channel_done_src_stream_V_V <= (g2N_ingress_U0_ap_done and (ap_sync_reg_channel_write_src_stream_V_V xor ap_const_logic_1));
    ap_sync_channel_write_dest_stream_V_V <= ((dest_stream_V_V_full_n and ap_channel_done_dest_stream_V_V) or ap_sync_reg_channel_write_dest_stream_V_V);
    ap_sync_channel_write_length_stream_V_V <= ((length_stream_V_V_full_n and ap_channel_done_length_stream_V_V) or ap_sync_reg_channel_write_length_stream_V_V);
    ap_sync_channel_write_src_stream_V_V <= ((src_stream_V_V_full_n and ap_channel_done_src_stream_V_V) or ap_sync_reg_channel_write_src_stream_V_V);
    ap_sync_continue <= ap_const_logic_0;
    buffer_storage_A_V_address0 <= g2N_ingress_U0_buffer_storage_V_address0;
    buffer_storage_A_V_ce0 <= g2N_ingress_U0_buffer_storage_V_ce0;
    buffer_storage_A_V_d0 <= g2N_ingress_U0_buffer_storage_V_d0;
    buffer_storage_A_V_we0 <= g2N_ingress_U0_buffer_storage_V_we0;
    buffer_storage_B_V_address0 <= g2N_egress_U0_buffer_storage_V_address0;
    buffer_storage_B_V_ce0 <= g2N_egress_U0_buffer_storage_V_ce0;
    buffer_storage_B_V_d0 <= ap_const_lv64_0;
    buffer_storage_B_V_we0 <= ap_const_logic_0;
    g2N_egress_U0_ap_continue <= ap_const_logic_1;
    g2N_egress_U0_ap_start <= (src_stream_V_V_empty_n and length_stream_V_V_empty_n and dest_stream_V_V_empty_n);
    g2N_egress_U0_start_full_n <= ap_const_logic_1;
    g2N_egress_U0_start_write <= ap_const_logic_0;
    g2N_ingress_U0_ap_continue <= (ap_sync_channel_write_src_stream_V_V and ap_sync_channel_write_length_stream_V_V and ap_sync_channel_write_dest_stream_V_V);
    g2N_ingress_U0_start_full_n <= ap_const_logic_1;
    g2N_ingress_U0_start_write <= ap_const_logic_0;
    g2N_input_V_read <= g2N_ingress_U0_input_V_read;
    g2N_output_V_din <= g2N_egress_U0_output_V_din;
    g2N_output_V_write <= g2N_egress_U0_output_V_write;
    n2G_U0_ap_continue <= ap_const_logic_1;
    n2G_U0_start_full_n <= ap_const_logic_1;
    n2G_U0_start_write <= ap_const_logic_0;
    n2G_input_V_read <= n2G_U0_input_V_read;
    n2G_output_V_din <= n2G_U0_output_V_din;
    n2G_output_V_write <= n2G_U0_output_V_write;
end behav;
