// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="galapagos_bridge,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.559000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=296,HLS_SYN_LUT=466}" *)

module galapagos_bridge (
        g2N_input_V_dout,
        g2N_input_V_empty_n,
        g2N_input_V_read,
        g2N_output_V_din,
        g2N_output_V_full_n,
        g2N_output_V_write,
        buffer_storage_A_V_address0,
        buffer_storage_A_V_ce0,
        buffer_storage_A_V_d0,
        buffer_storage_A_V_q0,
        buffer_storage_A_V_we0,
        buffer_storage_B_V_address0,
        buffer_storage_B_V_ce0,
        buffer_storage_B_V_d0,
        buffer_storage_B_V_q0,
        buffer_storage_B_V_we0,
        n2G_input_V_dout,
        n2G_input_V_empty_n,
        n2G_input_V_read,
        n2G_output_V_din,
        n2G_output_V_full_n,
        n2G_output_V_write,
        ap_clk,
        ap_rst
);


input  [88:0] g2N_input_V_dout;
input   g2N_input_V_empty_n;
output   g2N_input_V_read;
output  [72:0] g2N_output_V_din;
input   g2N_output_V_full_n;
output   g2N_output_V_write;
output  [8:0] buffer_storage_A_V_address0;
output   buffer_storage_A_V_ce0;
output  [63:0] buffer_storage_A_V_d0;
input  [63:0] buffer_storage_A_V_q0;
output   buffer_storage_A_V_we0;
output  [8:0] buffer_storage_B_V_address0;
output   buffer_storage_B_V_ce0;
output  [63:0] buffer_storage_B_V_d0;
input  [63:0] buffer_storage_B_V_q0;
output   buffer_storage_B_V_we0;
input  [72:0] n2G_input_V_dout;
input   n2G_input_V_empty_n;
output   n2G_input_V_read;
output  [88:0] n2G_output_V_din;
input   n2G_output_V_full_n;
output   n2G_output_V_write;
input   ap_clk;
input   ap_rst;

reg    g2N_ingress_U0_ap_start;
wire    g2N_ingress_U0_ap_done;
wire    g2N_ingress_U0_ap_continue;
wire    g2N_ingress_U0_ap_idle;
wire    g2N_ingress_U0_ap_ready;
wire    g2N_ingress_U0_input_V_read;
wire   [8:0] g2N_ingress_U0_buffer_storage_V_address0;
wire    g2N_ingress_U0_buffer_storage_V_ce0;
wire    g2N_ingress_U0_buffer_storage_V_we0;
wire   [63:0] g2N_ingress_U0_buffer_storage_V_d0;
wire   [15:0] g2N_ingress_U0_length_stream_V_V;
wire    g2N_ingress_U0_length_stream_V_V_ap_vld;
wire   [7:0] g2N_ingress_U0_dest_stream_V_V;
wire    g2N_ingress_U0_dest_stream_V_V_ap_vld;
wire   [7:0] g2N_ingress_U0_src_stream_V_V;
wire    g2N_ingress_U0_src_stream_V_V_ap_vld;
wire    ap_channel_done_src_stream_V_V;
wire    src_stream_V_V_full_n;
reg    ap_sync_reg_channel_write_src_stream_V_V;
wire    ap_sync_channel_write_src_stream_V_V;
wire    ap_channel_done_dest_stream_V_V;
wire    dest_stream_V_V_full_n;
reg    ap_sync_reg_channel_write_dest_stream_V_V;
wire    ap_sync_channel_write_dest_stream_V_V;
wire    ap_channel_done_length_stream_V_V;
wire    length_stream_V_V_full_n;
reg    ap_sync_reg_channel_write_length_stream_V_V;
wire    ap_sync_channel_write_length_stream_V_V;
wire    ap_sync_continue;
wire    g2N_egress_U0_ap_start;
wire    g2N_egress_U0_ap_done;
wire    g2N_egress_U0_ap_continue;
wire    g2N_egress_U0_ap_idle;
wire    g2N_egress_U0_ap_ready;
wire   [72:0] g2N_egress_U0_output_V_din;
wire    g2N_egress_U0_output_V_write;
wire   [8:0] g2N_egress_U0_buffer_storage_V_address0;
wire    g2N_egress_U0_buffer_storage_V_ce0;
reg    n2G_U0_ap_start;
wire    n2G_U0_ap_done;
wire    n2G_U0_ap_continue;
wire    n2G_U0_ap_idle;
wire    n2G_U0_ap_ready;
wire    n2G_U0_input_V_read;
wire   [88:0] n2G_U0_output_V_din;
wire    n2G_U0_output_V_write;
wire   [15:0] length_stream_V_V_dout;
wire    length_stream_V_V_empty_n;
wire   [7:0] dest_stream_V_V_dout;
wire    dest_stream_V_V_empty_n;
wire   [7:0] src_stream_V_V_dout;
wire    src_stream_V_V_empty_n;
wire    g2N_ingress_U0_start_full_n;
wire    g2N_ingress_U0_start_write;
wire    g2N_egress_U0_start_full_n;
wire    g2N_egress_U0_start_write;
wire    n2G_U0_start_full_n;
wire    n2G_U0_start_write;

// power-on initialization
initial begin
#0 g2N_ingress_U0_ap_start = 1'b0;
#0 ap_sync_reg_channel_write_src_stream_V_V = 1'b0;
#0 ap_sync_reg_channel_write_dest_stream_V_V = 1'b0;
#0 ap_sync_reg_channel_write_length_stream_V_V = 1'b0;
#0 n2G_U0_ap_start = 1'b0;
end

g2N_ingress g2N_ingress_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(g2N_ingress_U0_ap_start),
    .ap_done(g2N_ingress_U0_ap_done),
    .ap_continue(g2N_ingress_U0_ap_continue),
    .ap_idle(g2N_ingress_U0_ap_idle),
    .ap_ready(g2N_ingress_U0_ap_ready),
    .input_V_dout(g2N_input_V_dout),
    .input_V_empty_n(g2N_input_V_empty_n),
    .input_V_read(g2N_ingress_U0_input_V_read),
    .buffer_storage_V_address0(g2N_ingress_U0_buffer_storage_V_address0),
    .buffer_storage_V_ce0(g2N_ingress_U0_buffer_storage_V_ce0),
    .buffer_storage_V_we0(g2N_ingress_U0_buffer_storage_V_we0),
    .buffer_storage_V_d0(g2N_ingress_U0_buffer_storage_V_d0),
    .length_stream_V_V(g2N_ingress_U0_length_stream_V_V),
    .length_stream_V_V_ap_vld(g2N_ingress_U0_length_stream_V_V_ap_vld),
    .dest_stream_V_V(g2N_ingress_U0_dest_stream_V_V),
    .dest_stream_V_V_ap_vld(g2N_ingress_U0_dest_stream_V_V_ap_vld),
    .src_stream_V_V(g2N_ingress_U0_src_stream_V_V),
    .src_stream_V_V_ap_vld(g2N_ingress_U0_src_stream_V_V_ap_vld)
);

g2N_egress g2N_egress_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(g2N_egress_U0_ap_start),
    .ap_done(g2N_egress_U0_ap_done),
    .ap_continue(g2N_egress_U0_ap_continue),
    .ap_idle(g2N_egress_U0_ap_idle),
    .ap_ready(g2N_egress_U0_ap_ready),
    .output_V_din(g2N_egress_U0_output_V_din),
    .output_V_full_n(g2N_output_V_full_n),
    .output_V_write(g2N_egress_U0_output_V_write),
    .buffer_storage_V_address0(g2N_egress_U0_buffer_storage_V_address0),
    .buffer_storage_V_ce0(g2N_egress_U0_buffer_storage_V_ce0),
    .buffer_storage_V_q0(buffer_storage_B_V_q0),
    .length_stream_V_V(length_stream_V_V_dout),
    .dest_stream_V_V(dest_stream_V_V_dout),
    .src_stream_V_V(src_stream_V_V_dout)
);

n2G n2G_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(n2G_U0_ap_start),
    .ap_done(n2G_U0_ap_done),
    .ap_continue(n2G_U0_ap_continue),
    .ap_idle(n2G_U0_ap_idle),
    .ap_ready(n2G_U0_ap_ready),
    .input_V_dout(n2G_input_V_dout),
    .input_V_empty_n(n2G_input_V_empty_n),
    .input_V_read(n2G_U0_input_V_read),
    .output_V_din(n2G_U0_output_V_din),
    .output_V_full_n(n2G_output_V_full_n),
    .output_V_write(n2G_U0_output_V_write)
);

fifo_w16_d2_A length_stream_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(g2N_ingress_U0_length_stream_V_V),
    .if_full_n(length_stream_V_V_full_n),
    .if_write(ap_channel_done_length_stream_V_V),
    .if_dout(length_stream_V_V_dout),
    .if_empty_n(length_stream_V_V_empty_n),
    .if_read(g2N_egress_U0_ap_ready)
);

fifo_w8_d2_A dest_stream_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(g2N_ingress_U0_dest_stream_V_V),
    .if_full_n(dest_stream_V_V_full_n),
    .if_write(ap_channel_done_dest_stream_V_V),
    .if_dout(dest_stream_V_V_dout),
    .if_empty_n(dest_stream_V_V_empty_n),
    .if_read(g2N_egress_U0_ap_ready)
);

fifo_w8_d2_A src_stream_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(g2N_ingress_U0_src_stream_V_V),
    .if_full_n(src_stream_V_V_full_n),
    .if_write(ap_channel_done_src_stream_V_V),
    .if_dout(src_stream_V_V_dout),
    .if_empty_n(src_stream_V_V_empty_n),
    .if_read(g2N_egress_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_dest_stream_V_V <= 1'b0;
    end else begin
        if (((g2N_ingress_U0_ap_done & g2N_ingress_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_dest_stream_V_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_dest_stream_V_V <= ap_sync_channel_write_dest_stream_V_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_length_stream_V_V <= 1'b0;
    end else begin
        if (((g2N_ingress_U0_ap_done & g2N_ingress_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_length_stream_V_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_length_stream_V_V <= ap_sync_channel_write_length_stream_V_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_src_stream_V_V <= 1'b0;
    end else begin
        if (((g2N_ingress_U0_ap_done & g2N_ingress_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_src_stream_V_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_src_stream_V_V <= ap_sync_channel_write_src_stream_V_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        g2N_ingress_U0_ap_start <= 1'b0;
    end else begin
        g2N_ingress_U0_ap_start <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        n2G_U0_ap_start <= 1'b0;
    end else begin
        n2G_U0_ap_start <= 1'b1;
    end
end

assign ap_channel_done_dest_stream_V_V = (g2N_ingress_U0_ap_done & (ap_sync_reg_channel_write_dest_stream_V_V ^ 1'b1));

assign ap_channel_done_length_stream_V_V = (g2N_ingress_U0_ap_done & (ap_sync_reg_channel_write_length_stream_V_V ^ 1'b1));

assign ap_channel_done_src_stream_V_V = (g2N_ingress_U0_ap_done & (ap_sync_reg_channel_write_src_stream_V_V ^ 1'b1));

assign ap_sync_channel_write_dest_stream_V_V = ((dest_stream_V_V_full_n & ap_channel_done_dest_stream_V_V) | ap_sync_reg_channel_write_dest_stream_V_V);

assign ap_sync_channel_write_length_stream_V_V = ((length_stream_V_V_full_n & ap_channel_done_length_stream_V_V) | ap_sync_reg_channel_write_length_stream_V_V);

assign ap_sync_channel_write_src_stream_V_V = ((src_stream_V_V_full_n & ap_channel_done_src_stream_V_V) | ap_sync_reg_channel_write_src_stream_V_V);

assign ap_sync_continue = 1'b0;

assign buffer_storage_A_V_address0 = g2N_ingress_U0_buffer_storage_V_address0;

assign buffer_storage_A_V_ce0 = g2N_ingress_U0_buffer_storage_V_ce0;

assign buffer_storage_A_V_d0 = g2N_ingress_U0_buffer_storage_V_d0;

assign buffer_storage_A_V_we0 = g2N_ingress_U0_buffer_storage_V_we0;

assign buffer_storage_B_V_address0 = g2N_egress_U0_buffer_storage_V_address0;

assign buffer_storage_B_V_ce0 = g2N_egress_U0_buffer_storage_V_ce0;

assign buffer_storage_B_V_d0 = 64'd0;

assign buffer_storage_B_V_we0 = 1'b0;

assign g2N_egress_U0_ap_continue = 1'b1;

assign g2N_egress_U0_ap_start = (src_stream_V_V_empty_n & length_stream_V_V_empty_n & dest_stream_V_V_empty_n);

assign g2N_egress_U0_start_full_n = 1'b1;

assign g2N_egress_U0_start_write = 1'b0;

assign g2N_ingress_U0_ap_continue = (ap_sync_channel_write_src_stream_V_V & ap_sync_channel_write_length_stream_V_V & ap_sync_channel_write_dest_stream_V_V);

assign g2N_ingress_U0_start_full_n = 1'b1;

assign g2N_ingress_U0_start_write = 1'b0;

assign g2N_input_V_read = g2N_ingress_U0_input_V_read;

assign g2N_output_V_din = g2N_egress_U0_output_V_din;

assign g2N_output_V_write = g2N_egress_U0_output_V_write;

assign n2G_U0_ap_continue = 1'b1;

assign n2G_U0_start_full_n = 1'b1;

assign n2G_U0_start_write = 1'b0;

assign n2G_input_V_read = n2G_U0_input_V_read;

assign n2G_output_V_din = n2G_U0_output_V_din;

assign n2G_output_V_write = n2G_U0_output_V_write;

endmodule //galapagos_bridge
