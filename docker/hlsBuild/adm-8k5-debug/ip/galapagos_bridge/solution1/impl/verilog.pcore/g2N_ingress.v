// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module g2N_ingress (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_dout,
        input_V_empty_n,
        input_V_read,
        buffer_storage_V_address0,
        buffer_storage_V_ce0,
        buffer_storage_V_we0,
        buffer_storage_V_d0,
        length_stream_V_V,
        length_stream_V_V_ap_vld,
        dest_stream_V_V,
        dest_stream_V_V_ap_vld,
        src_stream_V_V,
        src_stream_V_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [88:0] input_V_dout;
input   input_V_empty_n;
output   input_V_read;
output  [8:0] buffer_storage_V_address0;
output   buffer_storage_V_ce0;
output   buffer_storage_V_we0;
output  [63:0] buffer_storage_V_d0;
output  [15:0] length_stream_V_V;
output   length_stream_V_V_ap_vld;
output  [7:0] dest_stream_V_V;
output   dest_stream_V_V_ap_vld;
output  [7:0] src_stream_V_V;
output   src_stream_V_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_read;
reg buffer_storage_V_ce0;
reg buffer_storage_V_we0;
reg length_stream_V_V_ap_vld;
reg dest_stream_V_V_ap_vld;
reg src_stream_V_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_146_p3;
reg   [0:0] tmp_reg_202;
reg    ap_block_state2;
wire   [9:0] tmp_V_4_fu_154_p2;
reg   [9:0] tmp_V_4_reg_206;
reg   [88:0] tmp2_reg_212;
reg   [9:0] i_reg_135;
reg    ap_block_state1;
wire   [0:0] tmp_7_fu_165_p3;
wire   [63:0] tmp_6_fu_173_p1;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (tmp_7_fu_165_p3 == 1'd0) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_135 <= tmp_V_4_fu_154_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_135 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp2_reg_212 <= input_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_4_reg_206 <= tmp_V_4_fu_154_p2;
        tmp_reg_202 <= i_reg_135[32'd9];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        buffer_storage_V_ce0 = 1'b1;
    end else begin
        buffer_storage_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buffer_storage_V_we0 = 1'b1;
    end else begin
        buffer_storage_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_202 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        dest_stream_V_V_ap_vld = 1'b1;
    end else begin
        dest_stream_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_blk_n = input_V_empty_n;
    end else begin
        input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_read = 1'b1;
    end else begin
        input_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_202 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        length_stream_V_V_ap_vld = 1'b1;
    end else begin
        length_stream_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_202 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        src_stream_V_V_ap_vld = 1'b1;
    end else begin
        src_stream_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (tmp_7_fu_165_p3 == 1'd0) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & ((tmp_fu_146_p3 == 1'd1) | ((tmp_7_fu_165_p3 == 1'd1) & (tmp_fu_146_p3 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((tmp_fu_146_p3 == 1'd0) & (input_V_empty_n == 1'b0));
end

assign buffer_storage_V_address0 = tmp_6_fu_173_p1;

assign buffer_storage_V_d0 = input_V_dout[63:0];

assign dest_stream_V_V = {{tmp2_reg_212[71:64]}};

assign length_stream_V_V = tmp_V_4_reg_206;

assign src_stream_V_V = {{tmp2_reg_212[80:73]}};

assign tmp_6_fu_173_p1 = i_reg_135;

assign tmp_7_fu_165_p3 = input_V_dout[32'd72];

assign tmp_V_4_fu_154_p2 = (i_reg_135 + 10'd1);

assign tmp_fu_146_p3 = i_reg_135[32'd9];

endmodule //g2N_ingress
