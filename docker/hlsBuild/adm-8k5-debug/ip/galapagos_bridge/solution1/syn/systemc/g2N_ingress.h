// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _g2N_ingress_HH_
#define _g2N_ingress_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct g2N_ingress : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<89> > input_V_dout;
    sc_in< sc_logic > input_V_empty_n;
    sc_out< sc_logic > input_V_read;
    sc_out< sc_lv<9> > buffer_storage_V_address0;
    sc_out< sc_logic > buffer_storage_V_ce0;
    sc_out< sc_logic > buffer_storage_V_we0;
    sc_out< sc_lv<64> > buffer_storage_V_d0;
    sc_out< sc_lv<16> > length_stream_V_V;
    sc_out< sc_logic > length_stream_V_V_ap_vld;
    sc_out< sc_lv<8> > dest_stream_V_V;
    sc_out< sc_logic > dest_stream_V_V_ap_vld;
    sc_out< sc_lv<8> > src_stream_V_V;
    sc_out< sc_logic > src_stream_V_V_ap_vld;


    // Module declarations
    g2N_ingress(sc_module_name name);
    SC_HAS_PROCESS(g2N_ingress);

    ~g2N_ingress();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_146_p3;
    sc_signal< sc_lv<1> > tmp_reg_202;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<10> > tmp_V_4_fu_154_p2;
    sc_signal< sc_lv<10> > tmp_V_4_reg_206;
    sc_signal< sc_lv<89> > tmp2_reg_212;
    sc_signal< sc_lv<10> > i_reg_135;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_7_fu_165_p3;
    sc_signal< sc_lv<64> > tmp_6_fu_173_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_48;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_47;
    static const sc_lv<32> ap_const_lv32_49;
    static const sc_lv<32> ap_const_lv32_50;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_buffer_storage_V_address0();
    void thread_buffer_storage_V_ce0();
    void thread_buffer_storage_V_d0();
    void thread_buffer_storage_V_we0();
    void thread_dest_stream_V_V();
    void thread_dest_stream_V_V_ap_vld();
    void thread_input_V_blk_n();
    void thread_input_V_read();
    void thread_length_stream_V_V();
    void thread_length_stream_V_V_ap_vld();
    void thread_src_stream_V_V();
    void thread_src_stream_V_V_ap_vld();
    void thread_tmp_6_fu_173_p1();
    void thread_tmp_7_fu_165_p3();
    void thread_tmp_V_4_fu_154_p2();
    void thread_tmp_fu_146_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
