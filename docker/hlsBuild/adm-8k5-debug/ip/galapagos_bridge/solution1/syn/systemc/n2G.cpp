// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "n2G.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic n2G::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic n2G::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> n2G::ap_ST_fsm_state1 = "1";
const sc_lv<3> n2G::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> n2G::ap_ST_fsm_state4 = "100";
const sc_lv<32> n2G::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool n2G::ap_const_boolean_1 = true;
const sc_lv<32> n2G::ap_const_lv32_1 = "1";
const bool n2G::ap_const_boolean_0 = false;
const sc_lv<1> n2G::ap_const_lv1_0 = "0";
const sc_lv<1> n2G::ap_const_lv1_1 = "1";
const sc_lv<10> n2G::ap_const_lv10_0 = "0000000000";
const sc_lv<32> n2G::ap_const_lv32_10 = "10000";
const sc_lv<32> n2G::ap_const_lv32_17 = "10111";
const sc_lv<32> n2G::ap_const_lv32_18 = "11000";
const sc_lv<32> n2G::ap_const_lv32_1F = "11111";
const sc_lv<32> n2G::ap_const_lv32_9 = "1001";
const sc_lv<10> n2G::ap_const_lv10_1 = "1";
const sc_lv<32> n2G::ap_const_lv32_40 = "1000000";
const sc_lv<32> n2G::ap_const_lv32_47 = "1000111";
const sc_lv<32> n2G::ap_const_lv32_48 = "1001000";
const sc_lv<32> n2G::ap_const_lv32_2 = "10";

n2G::n2G(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_144_p3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_144_p3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( input_V_empty_n );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_144_p3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( input_V_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( input_V_empty_n );
    sensitive << ( tmp_1_fu_144_p3 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( output_V_full_n );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_tran3to4_state2);
    sensitive << ( tmp_1_fu_144_p3 );
    sensitive << ( tmp_last_V_fu_172_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_1_fu_152_p2);
    sensitive << ( i_reg_113 );

    SC_METHOD(thread_input_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_1_fu_144_p3 );

    SC_METHOD(thread_input_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_144_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_output_V_blk_n);
    sensitive << ( output_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_output_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( tmp_id_V_reg_190 );
    sensitive << ( tmp_dest_V_reg_195 );
    sensitive << ( tmp_data_V_reg_209 );
    sensitive << ( tmp_keep_V_reg_214 );
    sensitive << ( tmp_last_V_reg_219 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_output_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_1_fu_144_p3);
    sensitive << ( i_reg_113 );

    SC_METHOD(thread_tmp_data_V_fu_158_p1);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_tmp_last_V_fu_172_p3);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "n2G_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_dout, "(port)input_V_dout");
    sc_trace(mVcdFile, input_V_empty_n, "(port)input_V_empty_n");
    sc_trace(mVcdFile, input_V_read, "(port)input_V_read");
    sc_trace(mVcdFile, output_V_din, "(port)output_V_din");
    sc_trace(mVcdFile, output_V_full_n, "(port)output_V_full_n");
    sc_trace(mVcdFile, output_V_write, "(port)output_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_V_blk_n, "input_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_1_fu_144_p3, "tmp_1_fu_144_p3");
    sc_trace(mVcdFile, output_V_blk_n, "output_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_1_reg_200, "tmp_1_reg_200");
    sc_trace(mVcdFile, i_reg_113, "i_reg_113");
    sc_trace(mVcdFile, tmp_id_V_reg_190, "tmp_id_V_reg_190");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_dest_V_reg_195, "tmp_dest_V_reg_195");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_1_fu_152_p2, "i_1_fu_152_p2");
    sc_trace(mVcdFile, tmp_data_V_fu_158_p1, "tmp_data_V_fu_158_p1");
    sc_trace(mVcdFile, tmp_data_V_reg_209, "tmp_data_V_reg_209");
    sc_trace(mVcdFile, tmp_keep_V_reg_214, "tmp_keep_V_reg_214");
    sc_trace(mVcdFile, tmp_last_V_fu_172_p3, "tmp_last_V_fu_172_p3");
    sc_trace(mVcdFile, tmp_last_V_reg_219, "tmp_last_V_reg_219");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_predicate_tran3to4_state2, "ap_predicate_tran3to4_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

n2G::~n2G() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void n2G::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_predicate_tran3to4_state2.read(), ap_const_boolean_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_fu_172_p3.read()))) {
        i_reg_113 = i_1_fu_152_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_113 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_200 = i_reg_113.read().range(9, 9);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_reg_209 = tmp_data_V_fu_158_p1.read();
        tmp_keep_V_reg_214 = input_V_dout.read().range(71, 64);
        tmp_last_V_reg_219 = input_V_dout.read().range(72, 72);
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_dest_V_reg_195 = input_V_dout.read().range(31, 24);
        tmp_id_V_reg_190 = input_V_dout.read().range(23, 16);
    }
}

void n2G::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void n2G::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void n2G::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void n2G::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void n2G::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read())));
}

void n2G::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read())));
}

void n2G::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read())));
}

void n2G::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void n2G::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0));
}

void n2G::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_full_n.read()));
}

void n2G::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void n2G::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void n2G::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void n2G::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void n2G::thread_ap_predicate_tran3to4_state2() {
    ap_predicate_tran3to4_state2 = (esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_1) || (esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(tmp_last_V_fu_172_p3.read(), ap_const_lv1_1)));
}

void n2G::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void n2G::thread_i_1_fu_152_p2() {
    i_1_fu_152_p2 = (!i_reg_113.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_113.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void n2G::thread_input_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0)))) {
        input_V_blk_n = input_V_empty_n.read();
    } else {
        input_V_blk_n = ap_const_logic_1;
    }
}

void n2G::thread_input_V_read() {
    if (((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_144_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        input_V_read = ap_const_logic_1;
    } else {
        input_V_read = ap_const_logic_0;
    }
}

void n2G::thread_output_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()))) {
        output_V_blk_n = output_V_full_n.read();
    } else {
        output_V_blk_n = ap_const_logic_1;
    }
}

void n2G::thread_output_V_din() {
    output_V_din = esl_concat<25,64>(esl_concat<17,8>(esl_concat<16,1>(esl_concat<8,8>(tmp_keep_V_reg_214.read(), tmp_id_V_reg_190.read()), tmp_last_V_reg_219.read()), tmp_dest_V_reg_195.read()), tmp_data_V_reg_209.read());
}

void n2G::thread_output_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_200.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_V_write = ap_const_logic_1;
    } else {
        output_V_write = ap_const_logic_0;
    }
}

void n2G::thread_tmp_1_fu_144_p3() {
    tmp_1_fu_144_p3 = i_reg_113.read().range(9, 9);
}

void n2G::thread_tmp_data_V_fu_158_p1() {
    tmp_data_V_fu_158_p1 = input_V_dout.read().range(64-1, 0);
}

void n2G::thread_tmp_last_V_fu_172_p3() {
    tmp_last_V_fu_172_p3 = input_V_dout.read().range(72, 72);
}

void n2G::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

