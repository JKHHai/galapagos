// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "g2N_egress.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic g2N_egress::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic g2N_egress::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> g2N_egress::ap_ST_fsm_state1 = "1";
const sc_lv<3> g2N_egress::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> g2N_egress::ap_ST_fsm_state4 = "100";
const sc_lv<32> g2N_egress::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool g2N_egress::ap_const_boolean_1 = true;
const sc_lv<32> g2N_egress::ap_const_lv32_1 = "1";
const bool g2N_egress::ap_const_boolean_0 = false;
const sc_lv<1> g2N_egress::ap_const_lv1_1 = "1";
const sc_lv<1> g2N_egress::ap_const_lv1_0 = "0";
const sc_lv<40> g2N_egress::ap_const_lv40_FF00000000 = "1111111100000000000000000000000000000000";
const sc_lv<3> g2N_egress::ap_const_lv3_0 = "000";
const sc_lv<73> g2N_egress::ap_const_lv73_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> g2N_egress::ap_const_lv32_47 = "1000111";
const sc_lv<17> g2N_egress::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<8> g2N_egress::ap_const_lv8_FF = "11111111";
const sc_lv<32> g2N_egress::ap_const_lv32_2 = "10";

g2N_egress::g2N_egress(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_222 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_222 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( output_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_222 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( output_V_full_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( output_V_full_n );
    sensitive << ( tmp_1_reg_222 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_1_fu_170_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_buffer_storage_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_182_p1 );

    SC_METHOD(thread_buffer_storage_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_3_fu_176_p2);
    sensitive << ( i_reg_125 );

    SC_METHOD(thread_lhs_V_cast_fu_187_p1);
    sensitive << ( tmp_V_reg_216 );

    SC_METHOD(thread_output_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_1_reg_222 );

    SC_METHOD(thread_output_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_222 );
    sensitive << ( tmp_9_fu_154_p5 );
    sensitive << ( tmp_16_fu_206_p4 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_output_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_1_reg_222 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_r_V_fu_190_p2);
    sensitive << ( lhs_V_cast_fu_187_p1 );

    SC_METHOD(thread_tmp_16_fu_206_p4);
    sensitive << ( buffer_storage_V_q0 );
    sensitive << ( tmp_last_V_reg_236 );

    SC_METHOD(thread_tmp_1_fu_170_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_125 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_fu_167_p1 );

    SC_METHOD(thread_tmp_2_fu_182_p1);
    sensitive << ( i_reg_125 );

    SC_METHOD(thread_tmp_3_cast_fu_196_p1);
    sensitive << ( r_V_fu_190_p2 );

    SC_METHOD(thread_tmp_5_fu_140_p6);
    sensitive << ( dest_stream_V_V );
    sensitive << ( src_stream_V_V );
    sensitive << ( tmp_fu_136_p1 );

    SC_METHOD(thread_tmp_9_fu_154_p5);
    sensitive << ( tmp_5_fu_140_p6 );

    SC_METHOD(thread_tmp_fu_136_p1);
    sensitive << ( length_stream_V_V );

    SC_METHOD(thread_tmp_last_V_fu_200_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_125 );
    sensitive << ( tmp_1_fu_170_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_3_cast_fu_196_p1 );

    SC_METHOD(thread_tmp_s_fu_167_p1);
    sensitive << ( tmp_V_reg_216 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_full_n );
    sensitive << ( tmp_1_fu_170_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "g2N_egress_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_V_din, "(port)output_V_din");
    sc_trace(mVcdFile, output_V_full_n, "(port)output_V_full_n");
    sc_trace(mVcdFile, output_V_write, "(port)output_V_write");
    sc_trace(mVcdFile, buffer_storage_V_address0, "(port)buffer_storage_V_address0");
    sc_trace(mVcdFile, buffer_storage_V_ce0, "(port)buffer_storage_V_ce0");
    sc_trace(mVcdFile, buffer_storage_V_q0, "(port)buffer_storage_V_q0");
    sc_trace(mVcdFile, length_stream_V_V, "(port)length_stream_V_V");
    sc_trace(mVcdFile, dest_stream_V_V, "(port)dest_stream_V_V");
    sc_trace(mVcdFile, src_stream_V_V, "(port)src_stream_V_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_V_blk_n, "output_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_1_reg_222, "tmp_1_reg_222");
    sc_trace(mVcdFile, i_reg_125, "i_reg_125");
    sc_trace(mVcdFile, tmp_V_reg_216, "tmp_V_reg_216");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_1_fu_170_p2, "tmp_1_fu_170_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_3_fu_176_p2, "i_3_fu_176_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_V_fu_200_p2, "tmp_last_V_fu_200_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_236, "tmp_last_V_reg_236");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, tmp_2_fu_182_p1, "tmp_2_fu_182_p1");
    sc_trace(mVcdFile, tmp_9_fu_154_p5, "tmp_9_fu_154_p5");
    sc_trace(mVcdFile, tmp_16_fu_206_p4, "tmp_16_fu_206_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_136_p1, "tmp_fu_136_p1");
    sc_trace(mVcdFile, tmp_5_fu_140_p6, "tmp_5_fu_140_p6");
    sc_trace(mVcdFile, tmp_s_fu_167_p1, "tmp_s_fu_167_p1");
    sc_trace(mVcdFile, lhs_V_cast_fu_187_p1, "lhs_V_cast_fu_187_p1");
    sc_trace(mVcdFile, r_V_fu_190_p2, "r_V_fu_190_p2");
    sc_trace(mVcdFile, tmp_3_cast_fu_196_p1, "tmp_3_cast_fu_196_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

g2N_egress::~g2N_egress() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void g2N_egress::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_170_p2.read()))) {
        i_reg_125 = i_3_fu_176_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_125 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_222 = tmp_1_fu_170_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_V_reg_216 = length_stream_V_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_170_p2.read()))) {
        tmp_last_V_reg_236 = tmp_last_V_fu_200_p2.read();
    }
}

void g2N_egress::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void g2N_egress::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void g2N_egress::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void g2N_egress::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void g2N_egress::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0));
}

void g2N_egress::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0));
}

void g2N_egress::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0));
}

void g2N_egress::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void g2N_egress::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void g2N_egress::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0));
}

void g2N_egress::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_1_fu_170_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void g2N_egress::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void g2N_egress::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void g2N_egress::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void g2N_egress::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void g2N_egress::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void g2N_egress::thread_buffer_storage_V_address0() {
    buffer_storage_V_address0 =  (sc_lv<9>) (tmp_2_fu_182_p1.read());
}

void g2N_egress::thread_buffer_storage_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        buffer_storage_V_ce0 = ap_const_logic_1;
    } else {
        buffer_storage_V_ce0 = ap_const_logic_0;
    }
}

void g2N_egress::thread_i_3_fu_176_p2() {
    i_3_fu_176_p2 = (!i_reg_125.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_125.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void g2N_egress::thread_lhs_V_cast_fu_187_p1() {
    lhs_V_cast_fu_187_p1 = esl_zext<17,16>(tmp_V_reg_216.read());
}

void g2N_egress::thread_output_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1)))) {
        output_V_blk_n = output_V_full_n.read();
    } else {
        output_V_blk_n = ap_const_logic_1;
    }
}

void g2N_egress::thread_output_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        output_V_din = tmp_16_fu_206_p4.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        output_V_din = tmp_9_fu_154_p5.read();
    } else {
        output_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void g2N_egress::thread_output_V_write() {
    if (((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_222.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        output_V_write = ap_const_logic_1;
    } else {
        output_V_write = ap_const_logic_0;
    }
}

void g2N_egress::thread_r_V_fu_190_p2() {
    r_V_fu_190_p2 = (!lhs_V_cast_fu_187_p1.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_biguint<17>(lhs_V_cast_fu_187_p1.read()) + sc_bigint<17>(ap_const_lv17_1FFFF));
}

void g2N_egress::thread_tmp_16_fu_206_p4() {
    tmp_16_fu_206_p4 = esl_concat<9,64>(esl_concat<1,8>(tmp_last_V_reg_236.read(), ap_const_lv8_FF), buffer_storage_V_q0.read());
}

void g2N_egress::thread_tmp_1_fu_170_p2() {
    tmp_1_fu_170_p2 = (!i_reg_125.read().is_01() || !tmp_s_fu_167_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_reg_125.read()) < sc_bigint<32>(tmp_s_fu_167_p1.read()));
}

void g2N_egress::thread_tmp_2_fu_182_p1() {
    tmp_2_fu_182_p1 = esl_zext<64,32>(i_reg_125.read());
}

void g2N_egress::thread_tmp_3_cast_fu_196_p1() {
    tmp_3_cast_fu_196_p1 = esl_sext<32,17>(r_V_fu_190_p2.read());
}

void g2N_egress::thread_tmp_5_fu_140_p6() {
    tmp_5_fu_140_p6 = esl_concat<69,3>(esl_concat<56,13>(esl_concat<48,8>(esl_concat<40,8>(ap_const_lv40_FF00000000, dest_stream_V_V.read()), src_stream_V_V.read()), tmp_fu_136_p1.read()), ap_const_lv3_0);
}

void g2N_egress::thread_tmp_9_fu_154_p5() {
    tmp_9_fu_154_p5 = esl_partset<73,73,72,32,32>(ap_const_lv73_0, tmp_5_fu_140_p6.read(), ap_const_lv32_0, ap_const_lv32_47);
}

void g2N_egress::thread_tmp_fu_136_p1() {
    tmp_fu_136_p1 = length_stream_V_V.read().range(13-1, 0);
}

void g2N_egress::thread_tmp_last_V_fu_200_p2() {
    tmp_last_V_fu_200_p2 = (!i_reg_125.read().is_01() || !tmp_3_cast_fu_196_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_125.read() == tmp_3_cast_fu_196_p1.read());
}

void g2N_egress::thread_tmp_s_fu_167_p1() {
    tmp_s_fu_167_p1 = esl_zext<32,16>(tmp_V_reg_216.read());
}

void g2N_egress::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(output_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(tmp_1_fu_170_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(tmp_1_fu_170_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

