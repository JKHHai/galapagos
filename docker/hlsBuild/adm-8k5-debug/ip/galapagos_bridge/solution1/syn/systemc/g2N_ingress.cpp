// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "g2N_ingress.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic g2N_ingress::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic g2N_ingress::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> g2N_ingress::ap_ST_fsm_state1 = "1";
const sc_lv<3> g2N_ingress::ap_ST_fsm_state2 = "10";
const sc_lv<3> g2N_ingress::ap_ST_fsm_state3 = "100";
const sc_lv<32> g2N_ingress::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> g2N_ingress::ap_const_lv32_1 = "1";
const sc_lv<1> g2N_ingress::ap_const_lv1_0 = "0";
const sc_lv<10> g2N_ingress::ap_const_lv10_0 = "0000000000";
const sc_lv<32> g2N_ingress::ap_const_lv32_2 = "10";
const sc_lv<32> g2N_ingress::ap_const_lv32_9 = "1001";
const sc_lv<10> g2N_ingress::ap_const_lv10_1 = "1";
const sc_lv<32> g2N_ingress::ap_const_lv32_48 = "1001000";
const sc_lv<32> g2N_ingress::ap_const_lv32_40 = "1000000";
const sc_lv<32> g2N_ingress::ap_const_lv32_47 = "1000111";
const sc_lv<32> g2N_ingress::ap_const_lv32_49 = "1001001";
const sc_lv<32> g2N_ingress::ap_const_lv32_50 = "1010000";
const sc_lv<1> g2N_ingress::ap_const_lv1_1 = "1";
const bool g2N_ingress::ap_const_boolean_1 = true;

g2N_ingress::g2N_ingress(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( input_V_empty_n );
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffer_storage_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_6_fu_173_p1 );

    SC_METHOD(thread_buffer_storage_V_ce0);
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_buffer_storage_V_d0);
    sensitive << ( input_V_dout );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buffer_storage_V_we0);
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_dest_stream_V_V);
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp2_reg_212 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dest_stream_V_V_ap_vld);
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_input_V_blk_n);
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_input_V_read);
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_length_stream_V_V);
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp_V_4_reg_206 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_length_stream_V_V_ap_vld);
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_src_stream_V_V);
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp2_reg_212 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_src_stream_V_V_ap_vld);
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_6_fu_173_p1);
    sensitive << ( i_reg_135 );

    SC_METHOD(thread_tmp_7_fu_165_p3);
    sensitive << ( input_V_dout );

    SC_METHOD(thread_tmp_V_4_fu_154_p2);
    sensitive << ( i_reg_135 );

    SC_METHOD(thread_tmp_fu_146_p3);
    sensitive << ( i_reg_135 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( input_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p3 );
    sensitive << ( tmp_7_fu_165_p3 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "g2N_ingress_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_dout, "(port)input_V_dout");
    sc_trace(mVcdFile, input_V_empty_n, "(port)input_V_empty_n");
    sc_trace(mVcdFile, input_V_read, "(port)input_V_read");
    sc_trace(mVcdFile, buffer_storage_V_address0, "(port)buffer_storage_V_address0");
    sc_trace(mVcdFile, buffer_storage_V_ce0, "(port)buffer_storage_V_ce0");
    sc_trace(mVcdFile, buffer_storage_V_we0, "(port)buffer_storage_V_we0");
    sc_trace(mVcdFile, buffer_storage_V_d0, "(port)buffer_storage_V_d0");
    sc_trace(mVcdFile, length_stream_V_V, "(port)length_stream_V_V");
    sc_trace(mVcdFile, length_stream_V_V_ap_vld, "(port)length_stream_V_V_ap_vld");
    sc_trace(mVcdFile, dest_stream_V_V, "(port)dest_stream_V_V");
    sc_trace(mVcdFile, dest_stream_V_V_ap_vld, "(port)dest_stream_V_V_ap_vld");
    sc_trace(mVcdFile, src_stream_V_V, "(port)src_stream_V_V");
    sc_trace(mVcdFile, src_stream_V_V_ap_vld, "(port)src_stream_V_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_V_blk_n, "input_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_146_p3, "tmp_fu_146_p3");
    sc_trace(mVcdFile, tmp_reg_202, "tmp_reg_202");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_V_4_fu_154_p2, "tmp_V_4_fu_154_p2");
    sc_trace(mVcdFile, tmp_V_4_reg_206, "tmp_V_4_reg_206");
    sc_trace(mVcdFile, tmp2_reg_212, "tmp2_reg_212");
    sc_trace(mVcdFile, i_reg_135, "i_reg_135");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_7_fu_165_p3, "tmp_7_fu_165_p3");
    sc_trace(mVcdFile, tmp_6_fu_173_p1, "tmp_6_fu_173_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

g2N_ingress::~g2N_ingress() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void g2N_ingress::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((!(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(tmp_7_fu_165_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_reg_135 = tmp_V_4_fu_154_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_135 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)))) {
        tmp2_reg_212 = input_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)))) {
        tmp_V_4_reg_206 = tmp_V_4_fu_154_p2.read();
        tmp_reg_202 = i_reg_135.read().range(9, 9);
    }
}

void g2N_ingress::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void g2N_ingress::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void g2N_ingress::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void g2N_ingress::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void g2N_ingress::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0));
}

void g2N_ingress::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void g2N_ingress::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void g2N_ingress::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void g2N_ingress::thread_buffer_storage_V_address0() {
    buffer_storage_V_address0 =  (sc_lv<9>) (tmp_6_fu_173_p1.read());
}

void g2N_ingress::thread_buffer_storage_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)))) {
        buffer_storage_V_ce0 = ap_const_logic_1;
    } else {
        buffer_storage_V_ce0 = ap_const_logic_0;
    }
}

void g2N_ingress::thread_buffer_storage_V_d0() {
    buffer_storage_V_d0 = input_V_dout.read().range(64-1, 0);
}

void g2N_ingress::thread_buffer_storage_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)))) {
        buffer_storage_V_we0 = ap_const_logic_1;
    } else {
        buffer_storage_V_we0 = ap_const_logic_0;
    }
}

void g2N_ingress::thread_dest_stream_V_V() {
    dest_stream_V_V = tmp2_reg_212.read().range(71, 64);
}

void g2N_ingress::thread_dest_stream_V_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_202.read()))) {
        dest_stream_V_V_ap_vld = ap_const_logic_1;
    } else {
        dest_stream_V_V_ap_vld = ap_const_logic_0;
    }
}

void g2N_ingress::thread_input_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0))) {
        input_V_blk_n = input_V_empty_n.read();
    } else {
        input_V_blk_n = ap_const_logic_1;
    }
}

void g2N_ingress::thread_input_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)))) {
        input_V_read = ap_const_logic_1;
    } else {
        input_V_read = ap_const_logic_0;
    }
}

void g2N_ingress::thread_length_stream_V_V() {
    length_stream_V_V = esl_zext<16,10>(tmp_V_4_reg_206.read());
}

void g2N_ingress::thread_length_stream_V_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_202.read()))) {
        length_stream_V_V_ap_vld = ap_const_logic_1;
    } else {
        length_stream_V_V_ap_vld = ap_const_logic_0;
    }
}

void g2N_ingress::thread_src_stream_V_V() {
    src_stream_V_V = tmp2_reg_212.read().range(80, 73);
}

void g2N_ingress::thread_src_stream_V_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_202.read()))) {
        src_stream_V_V_ap_vld = ap_const_logic_1;
    } else {
        src_stream_V_V_ap_vld = ap_const_logic_0;
    }
}

void g2N_ingress::thread_tmp_6_fu_173_p1() {
    tmp_6_fu_173_p1 = esl_zext<64,10>(i_reg_135.read());
}

void g2N_ingress::thread_tmp_7_fu_165_p3() {
    tmp_7_fu_165_p3 = input_V_dout.read().range(72, 72);
}

void g2N_ingress::thread_tmp_V_4_fu_154_p2() {
    tmp_V_4_fu_154_p2 = (!i_reg_135.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_135.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void g2N_ingress::thread_tmp_fu_146_p3() {
    tmp_fu_146_p3 = i_reg_135.read().range(9, 9);
}

void g2N_ingress::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(tmp_7_fu_165_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(input_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_1) || 
  (esl_seteq<1,1,1>(tmp_7_fu_165_p3.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(tmp_fu_146_p3.read(), ap_const_lv1_0))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

