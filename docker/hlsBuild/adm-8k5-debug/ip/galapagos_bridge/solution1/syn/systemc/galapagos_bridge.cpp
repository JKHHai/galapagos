// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "galapagos_bridge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic galapagos_bridge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<73> galapagos_bridge::ap_const_lv73_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<9> galapagos_bridge::ap_const_lv9_0 = "000000000";
const sc_lv<64> galapagos_bridge::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> galapagos_bridge::ap_const_lv89_0 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic galapagos_bridge::ap_const_logic_1 = sc_dt::Log_1;
const bool galapagos_bridge::ap_const_boolean_1 = true;

galapagos_bridge::galapagos_bridge(sc_module_name name) : sc_module(name), mVcdFile(0) {
    g2N_ingress_U0 = new g2N_ingress("g2N_ingress_U0");
    g2N_ingress_U0->ap_clk(ap_clk);
    g2N_ingress_U0->ap_rst(ap_rst);
    g2N_ingress_U0->ap_start(g2N_ingress_U0_ap_start);
    g2N_ingress_U0->ap_done(g2N_ingress_U0_ap_done);
    g2N_ingress_U0->ap_continue(g2N_ingress_U0_ap_continue);
    g2N_ingress_U0->ap_idle(g2N_ingress_U0_ap_idle);
    g2N_ingress_U0->ap_ready(g2N_ingress_U0_ap_ready);
    g2N_ingress_U0->input_V_dout(g2N_input_V_dout);
    g2N_ingress_U0->input_V_empty_n(g2N_input_V_empty_n);
    g2N_ingress_U0->input_V_read(g2N_ingress_U0_input_V_read);
    g2N_ingress_U0->buffer_storage_V_address0(g2N_ingress_U0_buffer_storage_V_address0);
    g2N_ingress_U0->buffer_storage_V_ce0(g2N_ingress_U0_buffer_storage_V_ce0);
    g2N_ingress_U0->buffer_storage_V_we0(g2N_ingress_U0_buffer_storage_V_we0);
    g2N_ingress_U0->buffer_storage_V_d0(g2N_ingress_U0_buffer_storage_V_d0);
    g2N_ingress_U0->length_stream_V_V(g2N_ingress_U0_length_stream_V_V);
    g2N_ingress_U0->length_stream_V_V_ap_vld(g2N_ingress_U0_length_stream_V_V_ap_vld);
    g2N_ingress_U0->dest_stream_V_V(g2N_ingress_U0_dest_stream_V_V);
    g2N_ingress_U0->dest_stream_V_V_ap_vld(g2N_ingress_U0_dest_stream_V_V_ap_vld);
    g2N_ingress_U0->src_stream_V_V(g2N_ingress_U0_src_stream_V_V);
    g2N_ingress_U0->src_stream_V_V_ap_vld(g2N_ingress_U0_src_stream_V_V_ap_vld);
    g2N_egress_U0 = new g2N_egress("g2N_egress_U0");
    g2N_egress_U0->ap_clk(ap_clk);
    g2N_egress_U0->ap_rst(ap_rst);
    g2N_egress_U0->ap_start(g2N_egress_U0_ap_start);
    g2N_egress_U0->ap_done(g2N_egress_U0_ap_done);
    g2N_egress_U0->ap_continue(g2N_egress_U0_ap_continue);
    g2N_egress_U0->ap_idle(g2N_egress_U0_ap_idle);
    g2N_egress_U0->ap_ready(g2N_egress_U0_ap_ready);
    g2N_egress_U0->output_V_din(g2N_egress_U0_output_V_din);
    g2N_egress_U0->output_V_full_n(g2N_output_V_full_n);
    g2N_egress_U0->output_V_write(g2N_egress_U0_output_V_write);
    g2N_egress_U0->buffer_storage_V_address0(g2N_egress_U0_buffer_storage_V_address0);
    g2N_egress_U0->buffer_storage_V_ce0(g2N_egress_U0_buffer_storage_V_ce0);
    g2N_egress_U0->buffer_storage_V_q0(buffer_storage_B_V_q0);
    g2N_egress_U0->length_stream_V_V(length_stream_V_V_dout);
    g2N_egress_U0->dest_stream_V_V(dest_stream_V_V_dout);
    g2N_egress_U0->src_stream_V_V(src_stream_V_V_dout);
    n2G_U0 = new n2G("n2G_U0");
    n2G_U0->ap_clk(ap_clk);
    n2G_U0->ap_rst(ap_rst);
    n2G_U0->ap_start(n2G_U0_ap_start);
    n2G_U0->ap_done(n2G_U0_ap_done);
    n2G_U0->ap_continue(n2G_U0_ap_continue);
    n2G_U0->ap_idle(n2G_U0_ap_idle);
    n2G_U0->ap_ready(n2G_U0_ap_ready);
    n2G_U0->input_V_dout(n2G_input_V_dout);
    n2G_U0->input_V_empty_n(n2G_input_V_empty_n);
    n2G_U0->input_V_read(n2G_U0_input_V_read);
    n2G_U0->output_V_din(n2G_U0_output_V_din);
    n2G_U0->output_V_full_n(n2G_output_V_full_n);
    n2G_U0->output_V_write(n2G_U0_output_V_write);
    length_stream_V_V_U = new fifo_w16_d2_A("length_stream_V_V_U");
    length_stream_V_V_U->clk(ap_clk);
    length_stream_V_V_U->reset(ap_rst);
    length_stream_V_V_U->if_read_ce(ap_var_for_const0);
    length_stream_V_V_U->if_write_ce(ap_var_for_const0);
    length_stream_V_V_U->if_din(g2N_ingress_U0_length_stream_V_V);
    length_stream_V_V_U->if_full_n(length_stream_V_V_full_n);
    length_stream_V_V_U->if_write(ap_channel_done_length_stream_V_V);
    length_stream_V_V_U->if_dout(length_stream_V_V_dout);
    length_stream_V_V_U->if_empty_n(length_stream_V_V_empty_n);
    length_stream_V_V_U->if_read(g2N_egress_U0_ap_ready);
    dest_stream_V_V_U = new fifo_w8_d2_A("dest_stream_V_V_U");
    dest_stream_V_V_U->clk(ap_clk);
    dest_stream_V_V_U->reset(ap_rst);
    dest_stream_V_V_U->if_read_ce(ap_var_for_const0);
    dest_stream_V_V_U->if_write_ce(ap_var_for_const0);
    dest_stream_V_V_U->if_din(g2N_ingress_U0_dest_stream_V_V);
    dest_stream_V_V_U->if_full_n(dest_stream_V_V_full_n);
    dest_stream_V_V_U->if_write(ap_channel_done_dest_stream_V_V);
    dest_stream_V_V_U->if_dout(dest_stream_V_V_dout);
    dest_stream_V_V_U->if_empty_n(dest_stream_V_V_empty_n);
    dest_stream_V_V_U->if_read(g2N_egress_U0_ap_ready);
    src_stream_V_V_U = new fifo_w8_d2_A("src_stream_V_V_U");
    src_stream_V_V_U->clk(ap_clk);
    src_stream_V_V_U->reset(ap_rst);
    src_stream_V_V_U->if_read_ce(ap_var_for_const0);
    src_stream_V_V_U->if_write_ce(ap_var_for_const0);
    src_stream_V_V_U->if_din(g2N_ingress_U0_src_stream_V_V);
    src_stream_V_V_U->if_full_n(src_stream_V_V_full_n);
    src_stream_V_V_U->if_write(ap_channel_done_src_stream_V_V);
    src_stream_V_V_U->if_dout(src_stream_V_V_dout);
    src_stream_V_V_U->if_empty_n(src_stream_V_V_empty_n);
    src_stream_V_V_U->if_read(g2N_egress_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_dest_stream_V_V);
    sensitive << ( g2N_ingress_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_dest_stream_V_V );

    SC_METHOD(thread_ap_channel_done_length_stream_V_V);
    sensitive << ( g2N_ingress_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_length_stream_V_V );

    SC_METHOD(thread_ap_channel_done_src_stream_V_V);
    sensitive << ( g2N_ingress_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_src_stream_V_V );

    SC_METHOD(thread_ap_sync_channel_write_dest_stream_V_V);
    sensitive << ( ap_channel_done_dest_stream_V_V );
    sensitive << ( dest_stream_V_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_dest_stream_V_V );

    SC_METHOD(thread_ap_sync_channel_write_length_stream_V_V);
    sensitive << ( ap_channel_done_length_stream_V_V );
    sensitive << ( length_stream_V_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_length_stream_V_V );

    SC_METHOD(thread_ap_sync_channel_write_src_stream_V_V);
    sensitive << ( ap_channel_done_src_stream_V_V );
    sensitive << ( src_stream_V_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_src_stream_V_V );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_buffer_storage_A_V_address0);
    sensitive << ( g2N_ingress_U0_buffer_storage_V_address0 );

    SC_METHOD(thread_buffer_storage_A_V_ce0);
    sensitive << ( g2N_ingress_U0_buffer_storage_V_ce0 );

    SC_METHOD(thread_buffer_storage_A_V_d0);
    sensitive << ( g2N_ingress_U0_buffer_storage_V_d0 );

    SC_METHOD(thread_buffer_storage_A_V_we0);
    sensitive << ( g2N_ingress_U0_buffer_storage_V_we0 );

    SC_METHOD(thread_buffer_storage_B_V_address0);
    sensitive << ( g2N_egress_U0_buffer_storage_V_address0 );

    SC_METHOD(thread_buffer_storage_B_V_ce0);
    sensitive << ( g2N_egress_U0_buffer_storage_V_ce0 );

    SC_METHOD(thread_buffer_storage_B_V_d0);

    SC_METHOD(thread_buffer_storage_B_V_we0);

    SC_METHOD(thread_g2N_egress_U0_ap_continue);

    SC_METHOD(thread_g2N_egress_U0_ap_start);
    sensitive << ( length_stream_V_V_empty_n );
    sensitive << ( dest_stream_V_V_empty_n );
    sensitive << ( src_stream_V_V_empty_n );

    SC_METHOD(thread_g2N_egress_U0_start_full_n);

    SC_METHOD(thread_g2N_egress_U0_start_write);

    SC_METHOD(thread_g2N_ingress_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_src_stream_V_V );
    sensitive << ( ap_sync_channel_write_dest_stream_V_V );
    sensitive << ( ap_sync_channel_write_length_stream_V_V );

    SC_METHOD(thread_g2N_ingress_U0_start_full_n);

    SC_METHOD(thread_g2N_ingress_U0_start_write);

    SC_METHOD(thread_g2N_input_V_read);
    sensitive << ( g2N_ingress_U0_input_V_read );

    SC_METHOD(thread_g2N_output_V_din);
    sensitive << ( g2N_egress_U0_output_V_din );

    SC_METHOD(thread_g2N_output_V_write);
    sensitive << ( g2N_egress_U0_output_V_write );

    SC_METHOD(thread_n2G_U0_ap_continue);

    SC_METHOD(thread_n2G_U0_start_full_n);

    SC_METHOD(thread_n2G_U0_start_write);

    SC_METHOD(thread_n2G_input_V_read);
    sensitive << ( n2G_U0_input_V_read );

    SC_METHOD(thread_n2G_output_V_din);
    sensitive << ( n2G_U0_output_V_din );

    SC_METHOD(thread_n2G_output_V_write);
    sensitive << ( n2G_U0_output_V_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    g2N_ingress_U0_ap_start = SC_LOGIC_0;
    ap_sync_reg_channel_write_src_stream_V_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_dest_stream_V_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_length_stream_V_V = SC_LOGIC_0;
    n2G_U0_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "galapagos_bridge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, g2N_input_V_dout, "(port)g2N_input_V_dout");
    sc_trace(mVcdFile, g2N_input_V_empty_n, "(port)g2N_input_V_empty_n");
    sc_trace(mVcdFile, g2N_input_V_read, "(port)g2N_input_V_read");
    sc_trace(mVcdFile, g2N_output_V_din, "(port)g2N_output_V_din");
    sc_trace(mVcdFile, g2N_output_V_full_n, "(port)g2N_output_V_full_n");
    sc_trace(mVcdFile, g2N_output_V_write, "(port)g2N_output_V_write");
    sc_trace(mVcdFile, buffer_storage_A_V_address0, "(port)buffer_storage_A_V_address0");
    sc_trace(mVcdFile, buffer_storage_A_V_ce0, "(port)buffer_storage_A_V_ce0");
    sc_trace(mVcdFile, buffer_storage_A_V_d0, "(port)buffer_storage_A_V_d0");
    sc_trace(mVcdFile, buffer_storage_A_V_q0, "(port)buffer_storage_A_V_q0");
    sc_trace(mVcdFile, buffer_storage_A_V_we0, "(port)buffer_storage_A_V_we0");
    sc_trace(mVcdFile, buffer_storage_B_V_address0, "(port)buffer_storage_B_V_address0");
    sc_trace(mVcdFile, buffer_storage_B_V_ce0, "(port)buffer_storage_B_V_ce0");
    sc_trace(mVcdFile, buffer_storage_B_V_d0, "(port)buffer_storage_B_V_d0");
    sc_trace(mVcdFile, buffer_storage_B_V_q0, "(port)buffer_storage_B_V_q0");
    sc_trace(mVcdFile, buffer_storage_B_V_we0, "(port)buffer_storage_B_V_we0");
    sc_trace(mVcdFile, n2G_input_V_dout, "(port)n2G_input_V_dout");
    sc_trace(mVcdFile, n2G_input_V_empty_n, "(port)n2G_input_V_empty_n");
    sc_trace(mVcdFile, n2G_input_V_read, "(port)n2G_input_V_read");
    sc_trace(mVcdFile, n2G_output_V_din, "(port)n2G_output_V_din");
    sc_trace(mVcdFile, n2G_output_V_full_n, "(port)n2G_output_V_full_n");
    sc_trace(mVcdFile, n2G_output_V_write, "(port)n2G_output_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, g2N_ingress_U0_ap_start, "g2N_ingress_U0_ap_start");
    sc_trace(mVcdFile, g2N_ingress_U0_ap_done, "g2N_ingress_U0_ap_done");
    sc_trace(mVcdFile, g2N_ingress_U0_ap_continue, "g2N_ingress_U0_ap_continue");
    sc_trace(mVcdFile, g2N_ingress_U0_ap_idle, "g2N_ingress_U0_ap_idle");
    sc_trace(mVcdFile, g2N_ingress_U0_ap_ready, "g2N_ingress_U0_ap_ready");
    sc_trace(mVcdFile, g2N_ingress_U0_input_V_read, "g2N_ingress_U0_input_V_read");
    sc_trace(mVcdFile, g2N_ingress_U0_buffer_storage_V_address0, "g2N_ingress_U0_buffer_storage_V_address0");
    sc_trace(mVcdFile, g2N_ingress_U0_buffer_storage_V_ce0, "g2N_ingress_U0_buffer_storage_V_ce0");
    sc_trace(mVcdFile, g2N_ingress_U0_buffer_storage_V_we0, "g2N_ingress_U0_buffer_storage_V_we0");
    sc_trace(mVcdFile, g2N_ingress_U0_buffer_storage_V_d0, "g2N_ingress_U0_buffer_storage_V_d0");
    sc_trace(mVcdFile, g2N_ingress_U0_length_stream_V_V, "g2N_ingress_U0_length_stream_V_V");
    sc_trace(mVcdFile, g2N_ingress_U0_length_stream_V_V_ap_vld, "g2N_ingress_U0_length_stream_V_V_ap_vld");
    sc_trace(mVcdFile, g2N_ingress_U0_dest_stream_V_V, "g2N_ingress_U0_dest_stream_V_V");
    sc_trace(mVcdFile, g2N_ingress_U0_dest_stream_V_V_ap_vld, "g2N_ingress_U0_dest_stream_V_V_ap_vld");
    sc_trace(mVcdFile, g2N_ingress_U0_src_stream_V_V, "g2N_ingress_U0_src_stream_V_V");
    sc_trace(mVcdFile, g2N_ingress_U0_src_stream_V_V_ap_vld, "g2N_ingress_U0_src_stream_V_V_ap_vld");
    sc_trace(mVcdFile, ap_channel_done_src_stream_V_V, "ap_channel_done_src_stream_V_V");
    sc_trace(mVcdFile, src_stream_V_V_full_n, "src_stream_V_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_src_stream_V_V, "ap_sync_reg_channel_write_src_stream_V_V");
    sc_trace(mVcdFile, ap_sync_channel_write_src_stream_V_V, "ap_sync_channel_write_src_stream_V_V");
    sc_trace(mVcdFile, ap_channel_done_dest_stream_V_V, "ap_channel_done_dest_stream_V_V");
    sc_trace(mVcdFile, dest_stream_V_V_full_n, "dest_stream_V_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_dest_stream_V_V, "ap_sync_reg_channel_write_dest_stream_V_V");
    sc_trace(mVcdFile, ap_sync_channel_write_dest_stream_V_V, "ap_sync_channel_write_dest_stream_V_V");
    sc_trace(mVcdFile, ap_channel_done_length_stream_V_V, "ap_channel_done_length_stream_V_V");
    sc_trace(mVcdFile, length_stream_V_V_full_n, "length_stream_V_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_length_stream_V_V, "ap_sync_reg_channel_write_length_stream_V_V");
    sc_trace(mVcdFile, ap_sync_channel_write_length_stream_V_V, "ap_sync_channel_write_length_stream_V_V");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, g2N_egress_U0_ap_start, "g2N_egress_U0_ap_start");
    sc_trace(mVcdFile, g2N_egress_U0_ap_done, "g2N_egress_U0_ap_done");
    sc_trace(mVcdFile, g2N_egress_U0_ap_continue, "g2N_egress_U0_ap_continue");
    sc_trace(mVcdFile, g2N_egress_U0_ap_idle, "g2N_egress_U0_ap_idle");
    sc_trace(mVcdFile, g2N_egress_U0_ap_ready, "g2N_egress_U0_ap_ready");
    sc_trace(mVcdFile, g2N_egress_U0_output_V_din, "g2N_egress_U0_output_V_din");
    sc_trace(mVcdFile, g2N_egress_U0_output_V_write, "g2N_egress_U0_output_V_write");
    sc_trace(mVcdFile, g2N_egress_U0_buffer_storage_V_address0, "g2N_egress_U0_buffer_storage_V_address0");
    sc_trace(mVcdFile, g2N_egress_U0_buffer_storage_V_ce0, "g2N_egress_U0_buffer_storage_V_ce0");
    sc_trace(mVcdFile, n2G_U0_ap_start, "n2G_U0_ap_start");
    sc_trace(mVcdFile, n2G_U0_ap_done, "n2G_U0_ap_done");
    sc_trace(mVcdFile, n2G_U0_ap_continue, "n2G_U0_ap_continue");
    sc_trace(mVcdFile, n2G_U0_ap_idle, "n2G_U0_ap_idle");
    sc_trace(mVcdFile, n2G_U0_ap_ready, "n2G_U0_ap_ready");
    sc_trace(mVcdFile, n2G_U0_input_V_read, "n2G_U0_input_V_read");
    sc_trace(mVcdFile, n2G_U0_output_V_din, "n2G_U0_output_V_din");
    sc_trace(mVcdFile, n2G_U0_output_V_write, "n2G_U0_output_V_write");
    sc_trace(mVcdFile, length_stream_V_V_dout, "length_stream_V_V_dout");
    sc_trace(mVcdFile, length_stream_V_V_empty_n, "length_stream_V_V_empty_n");
    sc_trace(mVcdFile, dest_stream_V_V_dout, "dest_stream_V_V_dout");
    sc_trace(mVcdFile, dest_stream_V_V_empty_n, "dest_stream_V_V_empty_n");
    sc_trace(mVcdFile, src_stream_V_V_dout, "src_stream_V_V_dout");
    sc_trace(mVcdFile, src_stream_V_V_empty_n, "src_stream_V_V_empty_n");
    sc_trace(mVcdFile, g2N_ingress_U0_start_full_n, "g2N_ingress_U0_start_full_n");
    sc_trace(mVcdFile, g2N_ingress_U0_start_write, "g2N_ingress_U0_start_write");
    sc_trace(mVcdFile, g2N_egress_U0_start_full_n, "g2N_egress_U0_start_full_n");
    sc_trace(mVcdFile, g2N_egress_U0_start_write, "g2N_egress_U0_start_write");
    sc_trace(mVcdFile, n2G_U0_start_full_n, "n2G_U0_start_full_n");
    sc_trace(mVcdFile, n2G_U0_start_write, "n2G_U0_start_write");
#endif

    }
    mHdltvinHandle.open("galapagos_bridge.hdltvin.dat");
    mHdltvoutHandle.open("galapagos_bridge.hdltvout.dat");
}

galapagos_bridge::~galapagos_bridge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete g2N_ingress_U0;
    delete g2N_egress_U0;
    delete n2G_U0;
    delete length_stream_V_V_U;
    delete dest_stream_V_V_U;
    delete src_stream_V_V_U;
}

void galapagos_bridge::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void galapagos_bridge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_dest_stream_V_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (g2N_ingress_U0_ap_done.read() & 
             g2N_ingress_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_dest_stream_V_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_dest_stream_V_V = ap_sync_channel_write_dest_stream_V_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_length_stream_V_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (g2N_ingress_U0_ap_done.read() & 
             g2N_ingress_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_length_stream_V_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_length_stream_V_V = ap_sync_channel_write_length_stream_V_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_src_stream_V_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (g2N_ingress_U0_ap_done.read() & 
             g2N_ingress_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_src_stream_V_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_src_stream_V_V = ap_sync_channel_write_src_stream_V_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        g2N_ingress_U0_ap_start = ap_const_logic_0;
    } else {
        g2N_ingress_U0_ap_start = ap_const_logic_1;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        n2G_U0_ap_start = ap_const_logic_0;
    } else {
        n2G_U0_ap_start = ap_const_logic_1;
    }
}

void galapagos_bridge::thread_ap_channel_done_dest_stream_V_V() {
    ap_channel_done_dest_stream_V_V = (g2N_ingress_U0_ap_done.read() & (ap_sync_reg_channel_write_dest_stream_V_V.read() ^ 
  ap_const_logic_1));
}

void galapagos_bridge::thread_ap_channel_done_length_stream_V_V() {
    ap_channel_done_length_stream_V_V = (g2N_ingress_U0_ap_done.read() & (ap_sync_reg_channel_write_length_stream_V_V.read() ^ 
  ap_const_logic_1));
}

void galapagos_bridge::thread_ap_channel_done_src_stream_V_V() {
    ap_channel_done_src_stream_V_V = (g2N_ingress_U0_ap_done.read() & (ap_sync_reg_channel_write_src_stream_V_V.read() ^ 
  ap_const_logic_1));
}

void galapagos_bridge::thread_ap_sync_channel_write_dest_stream_V_V() {
    ap_sync_channel_write_dest_stream_V_V = ((ap_channel_done_dest_stream_V_V.read() & 
  dest_stream_V_V_full_n.read()) | ap_sync_reg_channel_write_dest_stream_V_V.read());
}

void galapagos_bridge::thread_ap_sync_channel_write_length_stream_V_V() {
    ap_sync_channel_write_length_stream_V_V = ((ap_channel_done_length_stream_V_V.read() & 
  length_stream_V_V_full_n.read()) | ap_sync_reg_channel_write_length_stream_V_V.read());
}

void galapagos_bridge::thread_ap_sync_channel_write_src_stream_V_V() {
    ap_sync_channel_write_src_stream_V_V = ((ap_channel_done_src_stream_V_V.read() & 
  src_stream_V_V_full_n.read()) | ap_sync_reg_channel_write_src_stream_V_V.read());
}

void galapagos_bridge::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void galapagos_bridge::thread_buffer_storage_A_V_address0() {
    buffer_storage_A_V_address0 = g2N_ingress_U0_buffer_storage_V_address0.read();
}

void galapagos_bridge::thread_buffer_storage_A_V_ce0() {
    buffer_storage_A_V_ce0 = g2N_ingress_U0_buffer_storage_V_ce0.read();
}

void galapagos_bridge::thread_buffer_storage_A_V_d0() {
    buffer_storage_A_V_d0 = g2N_ingress_U0_buffer_storage_V_d0.read();
}

void galapagos_bridge::thread_buffer_storage_A_V_we0() {
    buffer_storage_A_V_we0 = g2N_ingress_U0_buffer_storage_V_we0.read();
}

void galapagos_bridge::thread_buffer_storage_B_V_address0() {
    buffer_storage_B_V_address0 = g2N_egress_U0_buffer_storage_V_address0.read();
}

void galapagos_bridge::thread_buffer_storage_B_V_ce0() {
    buffer_storage_B_V_ce0 = g2N_egress_U0_buffer_storage_V_ce0.read();
}

void galapagos_bridge::thread_buffer_storage_B_V_d0() {
    buffer_storage_B_V_d0 = ap_const_lv64_0;
}

void galapagos_bridge::thread_buffer_storage_B_V_we0() {
    buffer_storage_B_V_we0 = ap_const_logic_0;
}

void galapagos_bridge::thread_g2N_egress_U0_ap_continue() {
    g2N_egress_U0_ap_continue = ap_const_logic_1;
}

void galapagos_bridge::thread_g2N_egress_U0_ap_start() {
    g2N_egress_U0_ap_start = (length_stream_V_V_empty_n.read() & dest_stream_V_V_empty_n.read() & src_stream_V_V_empty_n.read());
}

void galapagos_bridge::thread_g2N_egress_U0_start_full_n() {
    g2N_egress_U0_start_full_n = ap_const_logic_1;
}

void galapagos_bridge::thread_g2N_egress_U0_start_write() {
    g2N_egress_U0_start_write = ap_const_logic_0;
}

void galapagos_bridge::thread_g2N_ingress_U0_ap_continue() {
    g2N_ingress_U0_ap_continue = (ap_sync_channel_write_src_stream_V_V.read() & ap_sync_channel_write_dest_stream_V_V.read() & ap_sync_channel_write_length_stream_V_V.read());
}

void galapagos_bridge::thread_g2N_ingress_U0_start_full_n() {
    g2N_ingress_U0_start_full_n = ap_const_logic_1;
}

void galapagos_bridge::thread_g2N_ingress_U0_start_write() {
    g2N_ingress_U0_start_write = ap_const_logic_0;
}

void galapagos_bridge::thread_g2N_input_V_read() {
    g2N_input_V_read = g2N_ingress_U0_input_V_read.read();
}

void galapagos_bridge::thread_g2N_output_V_din() {
    g2N_output_V_din = g2N_egress_U0_output_V_din.read();
}

void galapagos_bridge::thread_g2N_output_V_write() {
    g2N_output_V_write = g2N_egress_U0_output_V_write.read();
}

void galapagos_bridge::thread_n2G_U0_ap_continue() {
    n2G_U0_ap_continue = ap_const_logic_1;
}

void galapagos_bridge::thread_n2G_U0_start_full_n() {
    n2G_U0_start_full_n = ap_const_logic_1;
}

void galapagos_bridge::thread_n2G_U0_start_write() {
    n2G_U0_start_write = ap_const_logic_0;
}

void galapagos_bridge::thread_n2G_input_V_read() {
    n2G_input_V_read = n2G_U0_input_V_read.read();
}

void galapagos_bridge::thread_n2G_output_V_din() {
    n2G_output_V_din = n2G_U0_output_V_din.read();
}

void galapagos_bridge::thread_n2G_output_V_write() {
    n2G_output_V_write = n2G_U0_output_V_write.read();
}

void galapagos_bridge::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"g2N_input_V_dout\" :  \"" << g2N_input_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"g2N_input_V_empty_n\" :  \"" << g2N_input_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"g2N_input_V_read\" :  \"" << g2N_input_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g2N_output_V_din\" :  \"" << g2N_output_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"g2N_output_V_full_n\" :  \"" << g2N_output_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g2N_output_V_write\" :  \"" << g2N_output_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_A_V_address0\" :  \"" << buffer_storage_A_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_A_V_ce0\" :  \"" << buffer_storage_A_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_A_V_d0\" :  \"" << buffer_storage_A_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buffer_storage_A_V_q0\" :  \"" << buffer_storage_A_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_A_V_we0\" :  \"" << buffer_storage_A_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_B_V_address0\" :  \"" << buffer_storage_B_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_B_V_ce0\" :  \"" << buffer_storage_B_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_B_V_d0\" :  \"" << buffer_storage_B_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buffer_storage_B_V_q0\" :  \"" << buffer_storage_B_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_storage_B_V_we0\" :  \"" << buffer_storage_B_V_we0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n2G_input_V_dout\" :  \"" << n2G_input_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n2G_input_V_empty_n\" :  \"" << n2G_input_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"n2G_input_V_read\" :  \"" << n2G_input_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"n2G_output_V_din\" :  \"" << n2G_output_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n2G_output_V_full_n\" :  \"" << n2G_output_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"n2G_output_V_write\" :  \"" << n2G_output_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

