// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _galapagos_bridge_HH_
#define _galapagos_bridge_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "g2N_ingress.h"
#include "g2N_egress.h"
#include "n2G.h"
#include "fifo_w16_d2_A.h"
#include "fifo_w8_d2_A.h"

namespace ap_rtl {

struct galapagos_bridge : public sc_module {
    // Port declarations 24
    sc_in< sc_lv<89> > g2N_input_V_dout;
    sc_in< sc_logic > g2N_input_V_empty_n;
    sc_out< sc_logic > g2N_input_V_read;
    sc_out< sc_lv<73> > g2N_output_V_din;
    sc_in< sc_logic > g2N_output_V_full_n;
    sc_out< sc_logic > g2N_output_V_write;
    sc_out< sc_lv<9> > buffer_storage_A_V_address0;
    sc_out< sc_logic > buffer_storage_A_V_ce0;
    sc_out< sc_lv<64> > buffer_storage_A_V_d0;
    sc_in< sc_lv<64> > buffer_storage_A_V_q0;
    sc_out< sc_logic > buffer_storage_A_V_we0;
    sc_out< sc_lv<9> > buffer_storage_B_V_address0;
    sc_out< sc_logic > buffer_storage_B_V_ce0;
    sc_out< sc_lv<64> > buffer_storage_B_V_d0;
    sc_in< sc_lv<64> > buffer_storage_B_V_q0;
    sc_out< sc_logic > buffer_storage_B_V_we0;
    sc_in< sc_lv<73> > n2G_input_V_dout;
    sc_in< sc_logic > n2G_input_V_empty_n;
    sc_out< sc_logic > n2G_input_V_read;
    sc_out< sc_lv<89> > n2G_output_V_din;
    sc_in< sc_logic > n2G_output_V_full_n;
    sc_out< sc_logic > n2G_output_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    galapagos_bridge(sc_module_name name);
    SC_HAS_PROCESS(galapagos_bridge);

    ~galapagos_bridge();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    g2N_ingress* g2N_ingress_U0;
    g2N_egress* g2N_egress_U0;
    n2G* n2G_U0;
    fifo_w16_d2_A* length_stream_V_V_U;
    fifo_w8_d2_A* dest_stream_V_V_U;
    fifo_w8_d2_A* src_stream_V_V_U;
    sc_signal< sc_logic > g2N_ingress_U0_ap_start;
    sc_signal< sc_logic > g2N_ingress_U0_ap_done;
    sc_signal< sc_logic > g2N_ingress_U0_ap_continue;
    sc_signal< sc_logic > g2N_ingress_U0_ap_idle;
    sc_signal< sc_logic > g2N_ingress_U0_ap_ready;
    sc_signal< sc_logic > g2N_ingress_U0_input_V_read;
    sc_signal< sc_lv<9> > g2N_ingress_U0_buffer_storage_V_address0;
    sc_signal< sc_logic > g2N_ingress_U0_buffer_storage_V_ce0;
    sc_signal< sc_logic > g2N_ingress_U0_buffer_storage_V_we0;
    sc_signal< sc_lv<64> > g2N_ingress_U0_buffer_storage_V_d0;
    sc_signal< sc_lv<16> > g2N_ingress_U0_length_stream_V_V;
    sc_signal< sc_logic > g2N_ingress_U0_length_stream_V_V_ap_vld;
    sc_signal< sc_lv<8> > g2N_ingress_U0_dest_stream_V_V;
    sc_signal< sc_logic > g2N_ingress_U0_dest_stream_V_V_ap_vld;
    sc_signal< sc_lv<8> > g2N_ingress_U0_src_stream_V_V;
    sc_signal< sc_logic > g2N_ingress_U0_src_stream_V_V_ap_vld;
    sc_signal< sc_logic > ap_channel_done_src_stream_V_V;
    sc_signal< sc_logic > src_stream_V_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_src_stream_V_V;
    sc_signal< sc_logic > ap_sync_channel_write_src_stream_V_V;
    sc_signal< sc_logic > ap_channel_done_dest_stream_V_V;
    sc_signal< sc_logic > dest_stream_V_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_dest_stream_V_V;
    sc_signal< sc_logic > ap_sync_channel_write_dest_stream_V_V;
    sc_signal< sc_logic > ap_channel_done_length_stream_V_V;
    sc_signal< sc_logic > length_stream_V_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_length_stream_V_V;
    sc_signal< sc_logic > ap_sync_channel_write_length_stream_V_V;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > g2N_egress_U0_ap_start;
    sc_signal< sc_logic > g2N_egress_U0_ap_done;
    sc_signal< sc_logic > g2N_egress_U0_ap_continue;
    sc_signal< sc_logic > g2N_egress_U0_ap_idle;
    sc_signal< sc_logic > g2N_egress_U0_ap_ready;
    sc_signal< sc_lv<73> > g2N_egress_U0_output_V_din;
    sc_signal< sc_logic > g2N_egress_U0_output_V_write;
    sc_signal< sc_lv<9> > g2N_egress_U0_buffer_storage_V_address0;
    sc_signal< sc_logic > g2N_egress_U0_buffer_storage_V_ce0;
    sc_signal< sc_logic > n2G_U0_ap_start;
    sc_signal< sc_logic > n2G_U0_ap_done;
    sc_signal< sc_logic > n2G_U0_ap_continue;
    sc_signal< sc_logic > n2G_U0_ap_idle;
    sc_signal< sc_logic > n2G_U0_ap_ready;
    sc_signal< sc_logic > n2G_U0_input_V_read;
    sc_signal< sc_lv<89> > n2G_U0_output_V_din;
    sc_signal< sc_logic > n2G_U0_output_V_write;
    sc_signal< sc_lv<16> > length_stream_V_V_dout;
    sc_signal< sc_logic > length_stream_V_V_empty_n;
    sc_signal< sc_lv<8> > dest_stream_V_V_dout;
    sc_signal< sc_logic > dest_stream_V_V_empty_n;
    sc_signal< sc_lv<8> > src_stream_V_V_dout;
    sc_signal< sc_logic > src_stream_V_V_empty_n;
    sc_signal< sc_logic > g2N_ingress_U0_start_full_n;
    sc_signal< sc_logic > g2N_ingress_U0_start_write;
    sc_signal< sc_logic > g2N_egress_U0_start_full_n;
    sc_signal< sc_logic > g2N_egress_U0_start_write;
    sc_signal< sc_logic > n2G_U0_start_full_n;
    sc_signal< sc_logic > n2G_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<73> ap_const_lv73_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<89> ap_const_lv89_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_dest_stream_V_V();
    void thread_ap_channel_done_length_stream_V_V();
    void thread_ap_channel_done_src_stream_V_V();
    void thread_ap_sync_channel_write_dest_stream_V_V();
    void thread_ap_sync_channel_write_length_stream_V_V();
    void thread_ap_sync_channel_write_src_stream_V_V();
    void thread_ap_sync_continue();
    void thread_buffer_storage_A_V_address0();
    void thread_buffer_storage_A_V_ce0();
    void thread_buffer_storage_A_V_d0();
    void thread_buffer_storage_A_V_we0();
    void thread_buffer_storage_B_V_address0();
    void thread_buffer_storage_B_V_ce0();
    void thread_buffer_storage_B_V_d0();
    void thread_buffer_storage_B_V_we0();
    void thread_g2N_egress_U0_ap_continue();
    void thread_g2N_egress_U0_ap_start();
    void thread_g2N_egress_U0_start_full_n();
    void thread_g2N_egress_U0_start_write();
    void thread_g2N_ingress_U0_ap_continue();
    void thread_g2N_ingress_U0_start_full_n();
    void thread_g2N_ingress_U0_start_write();
    void thread_g2N_input_V_read();
    void thread_g2N_output_V_din();
    void thread_g2N_output_V_write();
    void thread_n2G_U0_ap_continue();
    void thread_n2G_U0_start_full_n();
    void thread_n2G_U0_start_write();
    void thread_n2G_input_V_read();
    void thread_n2G_output_V_din();
    void thread_n2G_output_V_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
