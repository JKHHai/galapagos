// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "linear_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic linear_2::ap_const_logic_1 = sc_dt::Log_1;
const bool linear_2::ap_const_boolean_1 = true;
const sc_logic linear_2::ap_const_logic_0 = sc_dt::Log_0;

linear_2::linear_2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( data_0_V_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( data_1_V_read );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( data_10_V_read );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( data_11_V_read );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( data_12_V_read );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( data_13_V_read );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( data_14_V_read );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( data_2_V_read );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( data_3_V_read );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( data_4_V_read );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( data_5_V_read );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( data_6_V_read );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( data_7_V_read );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( data_8_V_read );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( data_9_V_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "linear_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_0_V_read, "(port)data_0_V_read");
    sc_trace(mVcdFile, data_1_V_read, "(port)data_1_V_read");
    sc_trace(mVcdFile, data_2_V_read, "(port)data_2_V_read");
    sc_trace(mVcdFile, data_3_V_read, "(port)data_3_V_read");
    sc_trace(mVcdFile, data_4_V_read, "(port)data_4_V_read");
    sc_trace(mVcdFile, data_5_V_read, "(port)data_5_V_read");
    sc_trace(mVcdFile, data_6_V_read, "(port)data_6_V_read");
    sc_trace(mVcdFile, data_7_V_read, "(port)data_7_V_read");
    sc_trace(mVcdFile, data_8_V_read, "(port)data_8_V_read");
    sc_trace(mVcdFile, data_9_V_read, "(port)data_9_V_read");
    sc_trace(mVcdFile, data_10_V_read, "(port)data_10_V_read");
    sc_trace(mVcdFile, data_11_V_read, "(port)data_11_V_read");
    sc_trace(mVcdFile, data_12_V_read, "(port)data_12_V_read");
    sc_trace(mVcdFile, data_13_V_read, "(port)data_13_V_read");
    sc_trace(mVcdFile, data_14_V_read, "(port)data_14_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
#endif

    }
}

linear_2::~linear_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void linear_2::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void linear_2::thread_ap_return_0() {
    ap_return_0 = data_0_V_read.read();
}

void linear_2::thread_ap_return_1() {
    ap_return_1 = data_1_V_read.read();
}

void linear_2::thread_ap_return_10() {
    ap_return_10 = data_10_V_read.read();
}

void linear_2::thread_ap_return_11() {
    ap_return_11 = data_11_V_read.read();
}

void linear_2::thread_ap_return_12() {
    ap_return_12 = data_12_V_read.read();
}

void linear_2::thread_ap_return_13() {
    ap_return_13 = data_13_V_read.read();
}

void linear_2::thread_ap_return_14() {
    ap_return_14 = data_14_V_read.read();
}

void linear_2::thread_ap_return_2() {
    ap_return_2 = data_2_V_read.read();
}

void linear_2::thread_ap_return_3() {
    ap_return_3 = data_3_V_read.read();
}

void linear_2::thread_ap_return_4() {
    ap_return_4 = data_4_V_read.read();
}

void linear_2::thread_ap_return_5() {
    ap_return_5 = data_5_V_read.read();
}

void linear_2::thread_ap_return_6() {
    ap_return_6 = data_6_V_read.read();
}

void linear_2::thread_ap_return_7() {
    ap_return_7 = data_7_V_read.read();
}

void linear_2::thread_ap_return_8() {
    ap_return_8 = data_8_V_read.read();
}

void linear_2::thread_ap_return_9() {
    ap_return_9 = data_9_V_read.read();
}

}

