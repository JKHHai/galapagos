// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_layer_0_0 (
        ap_clk,
        ap_rst,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] data_0_V_read;
input  [31:0] data_1_V_read;
input  [31:0] data_2_V_read;
input  [31:0] data_3_V_read;
input  [31:0] data_4_V_read;
output  [28:0] ap_return;
input   ap_ce;

reg[28:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [19:0] tmp_256_reg_384;
reg   [19:0] tmp_256_reg_384_pp0_iter1_reg;
reg   [19:0] tmp_256_reg_384_pp0_iter2_reg;
reg   [27:0] tmp_253_reg_394;
reg   [27:0] tmp_253_reg_394_pp0_iter3_reg;
reg   [21:0] tmp_254_reg_399;
reg   [20:0] tmp_255_reg_404;
reg   [19:0] tmp_257_reg_409;
wire   [22:0] tmp2_fu_326_p2;
reg   [22:0] tmp2_reg_414;
wire   [21:0] tmp3_fu_342_p2;
reg   [21:0] tmp3_reg_419;
wire   [5:0] grp_fu_103_p1;
wire    ap_block_pp0_stage0;
wire   [7:0] grp_fu_104_p1;
wire   [6:0] grp_fu_105_p1;
wire   [14:0] grp_fu_106_p1;
wire  signed [31:0] OP1_V_3_cast5_fu_231_p0;
wire  signed [31:0] p_shl_fu_235_p1;
wire   [36:0] p_shl_fu_235_p3;
wire  signed [37:0] p_shl_cast_fu_243_p1;
wire   [37:0] p_neg_fu_247_p2;
wire  signed [37:0] OP1_V_3_cast5_fu_231_p1;
wire   [37:0] p_Val2_2_fu_253_p2;
wire   [45:0] grp_fu_106_p2;
wire   [39:0] grp_fu_104_p2;
wire   [38:0] grp_fu_105_p2;
wire   [37:0] grp_fu_103_p2;
wire  signed [22:0] tmp_6_cast_fu_314_p1;
wire  signed [22:0] tmp_9_cast_fu_317_p1;
wire  signed [20:0] tmp_15_cast_fu_323_p1;
wire   [20:0] tmp4_fu_332_p2;
wire  signed [21:0] tmp4_cast_fu_338_p1;
wire  signed [21:0] tmp_12_cast_fu_320_p1;
wire  signed [28:0] tmp2_cast_fu_351_p1;
wire  signed [28:0] tmp_3_cast_fu_348_p1;
wire  signed [28:0] tmp3_cast_fu_360_p1;
wire   [28:0] tmp1_fu_354_p2;
reg    grp_fu_103_ce;
reg    grp_fu_104_ce;
reg    grp_fu_105_ce;
reg    grp_fu_106_ce;
wire   [28:0] res_V_write_assign_fu_363_p2;
reg    ap_ce_reg;
reg  signed [31:0] data_0_V_read_int_reg;
reg  signed [31:0] data_1_V_read_int_reg;
reg  signed [31:0] data_2_V_read_int_reg;
reg   [31:0] data_3_V_read_int_reg;
reg  signed [31:0] data_4_V_read_int_reg;
reg   [28:0] ap_return_int_reg;

hls4ml_hcal_mul_3Zio #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 38 ))
hls4ml_hcal_mul_3Zio_U348(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_4_V_read_int_reg),
    .din1(grp_fu_103_p1),
    .ce(grp_fu_103_ce),
    .dout(grp_fu_103_p2)
);

hls4ml_hcal_mul_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
hls4ml_hcal_mul_3VhK_U349(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_1_V_read_int_reg),
    .din1(grp_fu_104_p1),
    .ce(grp_fu_104_ce),
    .dout(grp_fu_104_p2)
);

hls4ml_hcal_mul_3UhA #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 39 ))
hls4ml_hcal_mul_3UhA_U350(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_2_V_read_int_reg),
    .din1(grp_fu_105_p1),
    .ce(grp_fu_105_ce),
    .dout(grp_fu_105_p2)
);

hls4ml_hcal_mul_3Yie #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 46 ))
hls4ml_hcal_mul_3Yie_U351(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_0_V_read_int_reg),
    .din1(grp_fu_106_p1),
    .ce(grp_fu_106_ce),
    .dout(grp_fu_106_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_write_assign_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        data_0_V_read_int_reg <= data_0_V_read;
        data_1_V_read_int_reg <= data_1_V_read;
        data_2_V_read_int_reg <= data_2_V_read;
        data_3_V_read_int_reg <= data_3_V_read;
        data_4_V_read_int_reg <= data_4_V_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        tmp2_reg_414 <= tmp2_fu_326_p2;
        tmp3_reg_419 <= tmp3_fu_342_p2;
        tmp_253_reg_394 <= {{grp_fu_106_p2[45:18]}};
        tmp_253_reg_394_pp0_iter3_reg <= tmp_253_reg_394;
        tmp_254_reg_399 <= {{grp_fu_104_p2[39:18]}};
        tmp_255_reg_404 <= {{grp_fu_105_p2[38:18]}};
        tmp_256_reg_384 <= {{p_Val2_2_fu_253_p2[37:18]}};
        tmp_256_reg_384_pp0_iter1_reg <= tmp_256_reg_384;
        tmp_256_reg_384_pp0_iter2_reg <= tmp_256_reg_384_pp0_iter1_reg;
        tmp_257_reg_409 <= {{grp_fu_103_p2[37:18]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_write_assign_fu_363_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_103_ce = 1'b1;
    end else begin
        grp_fu_103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_104_ce = 1'b1;
    end else begin
        grp_fu_104_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_105_ce = 1'b1;
    end else begin
        grp_fu_105_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_106_ce = 1'b1;
    end else begin
        grp_fu_106_ce = 1'b0;
    end
end

assign OP1_V_3_cast5_fu_231_p0 = data_3_V_read_int_reg;

assign OP1_V_3_cast5_fu_231_p1 = OP1_V_3_cast5_fu_231_p0;

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign grp_fu_103_p1 = 38'd23;

assign grp_fu_104_p1 = 40'd70;

assign grp_fu_105_p1 = 39'd39;

assign grp_fu_106_p1 = 46'd12147;

assign p_Val2_2_fu_253_p2 = ($signed(p_neg_fu_247_p2) - $signed(OP1_V_3_cast5_fu_231_p1));

assign p_neg_fu_247_p2 = ($signed(38'd0) - $signed(p_shl_cast_fu_243_p1));

assign p_shl_cast_fu_243_p1 = $signed(p_shl_fu_235_p3);

assign p_shl_fu_235_p1 = data_3_V_read_int_reg;

assign p_shl_fu_235_p3 = {{p_shl_fu_235_p1}, {5'd0}};

assign res_V_write_assign_fu_363_p2 = ($signed(tmp3_cast_fu_360_p1) + $signed(tmp1_fu_354_p2));

assign tmp1_fu_354_p2 = ($signed(tmp2_cast_fu_351_p1) + $signed(tmp_3_cast_fu_348_p1));

assign tmp2_cast_fu_351_p1 = $signed(tmp2_reg_414);

assign tmp2_fu_326_p2 = ($signed(tmp_6_cast_fu_314_p1) + $signed(tmp_9_cast_fu_317_p1));

assign tmp3_cast_fu_360_p1 = $signed(tmp3_reg_419);

assign tmp3_fu_342_p2 = ($signed(tmp4_cast_fu_338_p1) + $signed(tmp_12_cast_fu_320_p1));

assign tmp4_cast_fu_338_p1 = $signed(tmp4_fu_332_p2);

assign tmp4_fu_332_p2 = ($signed(tmp_15_cast_fu_323_p1) + $signed(21'd2038871));

assign tmp_12_cast_fu_320_p1 = $signed(tmp_256_reg_384_pp0_iter2_reg);

assign tmp_15_cast_fu_323_p1 = $signed(tmp_257_reg_409);

assign tmp_3_cast_fu_348_p1 = $signed(tmp_253_reg_394_pp0_iter3_reg);

assign tmp_6_cast_fu_314_p1 = $signed(tmp_254_reg_399);

assign tmp_9_cast_fu_317_p1 = $signed(tmp_255_reg_404);

endmodule //compute_layer_0_0
